<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个程序猿之家</title>
  <subtitle>世界那么大，在此安个家...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ehlxr.me/"/>
  <updated>2016-10-11T11:05:47.487Z</updated>
  <id>http://ehlxr.me/</id>
  
  <author>
    <name>小桥流水人家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]Kafka入门教程</title>
    <link href="http://ehlxr.me/2016/10/10/%E8%BD%AC-Kafka%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://ehlxr.me/2016/10/10/转-Kafka入门教程/</id>
    <published>2016-10-10T13:40:52.000Z</published>
    <updated>2016-10-11T11:05:47.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Kafka 是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。</p>
<p><strong>这个独特的设计是什么样的呢？</strong></p>
<p>首先让我们看几个基本的消息系统术语：</p>
<ul>
<li>Kafka 将消息以 topic 为单位进行归纳</li>
<li>将向 Kafka topic 发布消息的程序成为 producers</li>
<li>将预订 topics 并消费消息的程序成为 consumer</li>
<li>Kafka 以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个 broker</li>
<li>producers 通过网络将消息发送到 Kafka集群，集群向消费者提供消息，如下图所示：</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009001.png" alt=""></p>
<a id="more"></a>
<p>客户端和服务端通过 TCP 协议通信。Kafka 提供了 Java 客户端，并且对多种语言都提供了支持。</p>
<h2 id="Topics-和-Logs"><a href="#Topics-和-Logs" class="headerlink" title="Topics 和 Logs"></a>Topics 和 Logs</h2><p>先来看一下 Kafka 提供的一个抽象概念：topic。</p>
<p>一个 topic 是对一组消息的归纳。对每个 topic，Kafka 对它的日志进行了分区，如下图所示：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009002.png" alt=""></p>
<p>每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做 offset，用来在分区中唯一的标识这个消息。</p>
<p>在一个可配置的时间段内，Kafka 集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为 2 天，那么在一个消息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka 的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。</p>
<p>实际上每个 consumer 唯一需要维护的数据是消息在日志中的位置，也就是 offset。这个 offset 有 consumer 来维护：一般情况下随着 consumer 不断的读取消息，这 offset 的值不断增加，但其实 consumer 可以以任意的顺序读取消息，比如它可以将 offset 设置成为一个旧的值来重读之前的消息。</p>
<p>以上特点的结合，使 Kafka consumers 非常的轻量级：它们可以在不对集群和其他 consumer 造成影响的情况下读取消息。你可以使用命令行来 <code>tail</code> 消息而不会对其他正在消费消息的 consumer 造成影响。</p>
<p>将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作 topic 提供了一种可能。</p>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><p>每个分区在 Kafka 集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使 Kafka 具备了容错能力。</p>
<p>每个分区都由一个服务器作为 leader，零或若干服务器作为 followers，leader 负责处理消息的读和写，followers 则去复制 leader。如果 leader down 了，followers 中的一台则会自动成为 leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的 leader，同时作为其他分区的 followers，这样集群就会据有较好的负载均衡。</p>
<h2 id="Producers"><a href="#Producers" class="headerlink" title="Producers"></a>Producers</h2><p>Producer 将消息发布到它指定的 topic 中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种。</p>
<h2 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h2><p>发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式（publish-subscribe）。</p>
<ul>
<li>队列模式中 consumers 可以同时从服务端读取消息，每个消息只被其中一个 consumer 读到。</li>
<li>发布-订阅模式中消息被广播到所有的 consumer 中。</li>
</ul>
<p>Consumers 可以加入一个 consumer 组，共同竞争一个 topic，topic 中的消息将被分发到组中的一个成员中。同一组中的 consumer 可以在不同的程序中，也可以在不同的机器上。如果所有的 consumer 都在一个组中，这就成为了传统的队列模式，在各 consumer 中实现负载均衡。如果所有的 consumer 都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的 consumer 中。更常见的是，每个 topic 都有若干数量的 consumer 组，每个组都是一个逻辑上的 “订阅者”，为了容错和更好的稳定性，每个组由若干 consumer 组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009003.png" alt="由两个机器组成的集群拥有 4 个分区（P0 - P3）2 个 consumer 组。A 组有两个 consumer，B 组有 4 个 consumer"></p>
<p><strong>相比传统的消息系统，Kafka 可以很好的保证有序性。</strong></p>
<p>传统的队列在服务器上保存有序的消息，如果多个 consumers 同时从这个服务器消费消息，服务器就会以消息存储的顺序向 consumer 分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各 consumer 上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用 <code>专用consumer</code> 的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。</p>
<p>在这方面 Kafka 做的更好，通过分区的概念，Kafka 可以在多个 consumer 组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个 consumer 组，这样一个分区就只被这个组的一个 consumer 消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个 consumer 组之间进行负载均衡。</p>
<p><strong><em>注意：</em></strong> consumer 组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。</p>
<p>Kafka 只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要 topic 中所有消息的有序性，那就只能让这个 topic 只有一个分区，当然也就只有一个 consumer 组消费它。</p>
<h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><h2 id="Step-1：下载-Kafka"><a href="#Step-1：下载-Kafka" class="headerlink" title="Step 1：下载 Kafka"></a>Step 1：下载 Kafka</h2><p>点击下载最新的版本并解压。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar -xzf kafka_2.9.2-0.8.1.1.tgz</div><div class="line">$ <span class="built_in">cd</span> kafka_2.9.2-0.8.1.1</div></pre></td></tr></table></figure>
<h2 id="Step-2：启动服务"><a href="#Step-2：启动服务" class="headerlink" title="Step 2：启动服务"></a>Step 2：启动服务</h2><p>Kafka 用到了 Zookeeper，所有首先启动 Zookeeper，下面简单的启用一个单实例的 Zookkeeper 服务。可以在命令的结尾加个 <code>&amp;</code> 符号，这样就可以启动后离开控制台。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</div><div class="line">[2013-04-22 15:01:37,495] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)</div></pre></td></tr></table></figure>
<p>现在启动Kafka:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-server-start.sh config/server.properties</div><div class="line">[2013-04-22 15:01:47,028] INFO Verifying properties (kafka.utils.VerifiableProperties)</div><div class="line">[2013-04-22 15:01:47,051] INFO Property socket.send.buffer.bytes is overridden to 1048576 (kafka.utils.VerifiableProperties)</div></pre></td></tr></table></figure>
<h2 id="Step-3：创建-topic"><a href="#Step-3：创建-topic" class="headerlink" title="Step 3：创建 topic"></a>Step 3：创建 topic</h2><p>创建一个叫做 “test” 的 topic，它只有一个分区，一个副本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>可以通过 list 命令查看创建的 topic：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.<span class="keyword">sh</span> --<span class="keyword">list</span> --zookeeper localhost:2181</div><div class="line"><span class="keyword">test</span></div></pre></td></tr></table></figure>
<p>除了手动创建 topic，还可以配置 broker 让它自动创建 topic。</p>
<h2 id="Step-4：发送消息"><a href="#Step-4：发送消息" class="headerlink" title="Step 4：发送消息"></a>Step 4：发送消息</h2><p>Kafka 使用一个简单的命令行 producer，从文件中或者从标准输入中读取消息并发送到服务端。默认的每条命令将发送一条消息。</p>
<p>运行 producer 并在控制台中输一些消息，这些消息将被发送到服务端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span> </div><div class="line">This is a messageThis is another message</div></pre></td></tr></table></figure>
<p><code>ctrl+c</code> 可以退出发送。</p>
<h2 id="Step-5：启动-consumer"><a href="#Step-5：启动-consumer" class="headerlink" title="Step 5：启动 consumer"></a>Step 5：启动 consumer</h2><p>Kafka 也有一个命令行 consumer 可以读取消息并输出到标准输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic <span class="built_in">test</span> --from-beginning</div><div class="line">This is a message</div><div class="line">This is another message</div></pre></td></tr></table></figure>
<p>你在一个终端中运行 consumer 命令行，另一个终端中运行 producer 命令行，就可以在一个终端输入消息，另一个终端读取消息。</p>
<p>这两个命令都有自己的可选参数，可以在运行的时候不加任何参数可以看到帮助信息。</p>
<h2 id="Step-6：搭建一个多个-broker-的集群"><a href="#Step-6：搭建一个多个-broker-的集群" class="headerlink" title="Step 6：搭建一个多个 broker 的集群"></a>Step 6：搭建一个多个 broker 的集群</h2><p>刚才只是启动了单个 broker，现在启动有 3 个 broker 组成的集群，这些 broker 节点也都是在本机上的。</p>
<p>首先为每个节点编写配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cp config/server.properties config/server-1.properties</div><div class="line">$ cp config/server.properties config/server-2.properties</div></pre></td></tr></table></figure>
<p>在拷贝出的新文件中添加以下参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">config/server-1.properties:</div><div class="line">    broker.id=1</div><div class="line">    port=9093</div><div class="line">    log.dir=/tmp/kafka-logs-1</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">config/server-2.properties:</div><div class="line">    broker.id=2</div><div class="line">    port=9094</div><div class="line">    log.dir=/tmp/kafka-logs-2</div></pre></td></tr></table></figure>
<p>broker.id 在集群中唯一的标注一个节点，因为在同一个机器上，所以必须制定不同的端口和日志文件，避免数据被覆盖。</p>
<p>刚才已经启动可 Zookeeper 和一个节点，现在启动另外两个节点：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-server-start.sh config/server-1.properties &amp;</div><div class="line"></div><div class="line">$ bin/kafka-server-start.sh config/server-2.properties &amp;</div></pre></td></tr></table></figure>
<p>创建一个拥有 3 个副本的 topic：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic my-replicated-topic</div></pre></td></tr></table></figure>
<p>现在我们搭建了一个集群，怎么知道每个节点的信息呢？运行 <code>describe topics</code> 命令就可以了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic my-replicated-topic</div></pre></td></tr></table></figure>
<p>下面解释一下这些输出。第一行是对所有分区的一个描述，然后每个分区都会对应一行，因为我们只有一个分区所以下面就只加了一行。</p>
<ul>
<li>leader：负责处理消息的读和写，leader是从所有节点中随机选择的。</li>
<li>replicas：列出了所有的副本节点，不管节点是否在服务中。</li>
<li>isr：是正在服务中的节点。</li>
</ul>
<p>在我们的例子中，节点 1 是作为 leader 运行。</p>
<p>向 topic 发送消息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my-replicated-topic</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my <span class="built_in">test</span> message 1my <span class="built_in">test</span> message 2</div></pre></td></tr></table></figure>
<p>消费这些消息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic my-replicated-topic</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">my <span class="built_in">test</span> message 1</div><div class="line">my <span class="built_in">test</span> message 2</div></pre></td></tr></table></figure>
<p>测试一下容错能力，Broker 1 作为 leader 运行，现在我们 kill 掉它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ps | grep server-1.properties7564 ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java...</div><div class="line">$ <span class="built_in">kill</span> -9 7564</div></pre></td></tr></table></figure>
<p>另外一个节点被选做了 leader，node 1 不再出现在 in-sync 副本列表中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-topics.sh --describe --zookeeper localhost:218192 --topic my-replicated-topic</div><div class="line"></div><div class="line">Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:</div><div class="line">Topic: my-replicated-topic      Partition: 0    Leader: 2       Replicas: 1,2,0 Isr: 2,0</div></pre></td></tr></table></figure>
<p>虽然最初负责续写消息的 leader down 掉了，但之前的消息还是可以消费的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic my-replicated-topic</div><div class="line">...</div><div class="line">my <span class="built_in">test</span> message 1</div><div class="line">my <span class="built_in">test</span> message 2</div></pre></td></tr></table></figure>
<p>看来 Kafka 的容错机制还是不错的。</p>
<h1 id="三、搭建Kafka开发环境"><a href="#三、搭建Kafka开发环境" class="headerlink" title="三、搭建Kafka开发环境"></a>三、搭建Kafka开发环境</h1><p>我们搭建了 kafka 的服务器，并可以使用 Kafka 的命令行工具创建 topic，发送和接收消息。下面我们来搭建 kafka 的开发环境。</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>搭建开发环境需要引入 kafka 的 jar 包，一种方式是将 Kafka 安装包中 lib 下的 jar 包加入到项目的 classpath 中，这种比较简单了。不过我们使用另一种更加流行的方式：使用 maven 管理 jar 包依赖。</p>
<p>创建好 maven 项目后，在 pom.xml 中添加以下依赖：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt; org.apache.kafka&lt;/groupId &gt;</div><div class="line">    &lt;artifactId&gt; kafka_2.10&lt;/artifactId &gt;</div><div class="line">    &lt;version&gt; 0.8.0&lt;/ version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>添加依赖后你会发现有两个 jar 包的依赖找不到。没关系我都帮你想好了，点击这里下载这两个 jar 包，解压后你有两种选择，第一种是使用 mvn 的 install 命令将 jar 包安装到本地仓库，另一种是直接将解压后的文件夹拷贝到 mvn 本地仓库的 com 文件夹下，比如我的本地仓库是 d:\mvn，完成后我的目录结构是这样的：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009004.png" alt=""></p>
<h2 id="配置程序"><a href="#配置程序" class="headerlink" title="配置程序"></a>配置程序</h2><p>首先是一个充当配置文件作用的接口,配置了 Kafka 的各种连接参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KafkaProperties</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String zkConnect = <span class="string">"10.22.10.139:2181"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String groupId = <span class="string">"group1"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic = <span class="string">"topic1"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String kafkaServerURL = <span class="string">"10.22.10.139"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> kafkaServerPort = <span class="number">9092</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> kafkaProducerBufferSize = <span class="number">64</span> * <span class="number">1024</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> connectionTimeOut = <span class="number">20000</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> reconnectInterval = <span class="number">10000</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic2 = <span class="string">"topic2"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String topic3 = <span class="string">"topic3"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String clientId = <span class="string">"SimpleConsumerDemoClient"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="producer"><a href="#producer" class="headerlink" title="producer"></a>producer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> kafka.producer.KeyedMessage;</div><div class="line"><span class="keyword">import</span> kafka.producer.ProducerConfig;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> kafka.javaapi.producer.Producer&lt;Integer, String&gt; producer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Properties props = <span class="keyword">new</span> Properties();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaProducer</span><span class="params">(String topic)</span> </span>&#123;</div><div class="line">        props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</div><div class="line">        props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"10.22.10.139:9092"</span>);</div><div class="line">        producer = <span class="keyword">new</span> kafka.javaapi.producer.Producer&lt;Integer, String&gt;(<span class="keyword">new</span> ProducerConfig(props));</div><div class="line">        <span class="keyword">this</span>.topic = topic;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> messageNo = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            String messageStr = <span class="keyword">new</span> String(<span class="string">"Message_"</span> + messageNo);</div><div class="line">            System.out.println(<span class="string">"Send:"</span> + messageStr);</div><div class="line">            producer.send(<span class="keyword">new</span> KeyedMessage&lt;Integer, String&gt;(topic, messageStr));</div><div class="line">            messageNo++;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerConfig;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerIterator;</div><div class="line"><span class="keyword">import</span> kafka.consumer.KafkaStream;</div><div class="line"><span class="keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConsumerConnector consumer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumer</span><span class="params">(String topic)</span> </span>&#123;</div><div class="line">        consumer = kafka.consumer.Consumer.createJavaConsumerConnector(</div><div class="line">                createConsumerConfig());</div><div class="line">        <span class="keyword">this</span>.topic = topic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ConsumerConfig <span class="title">createConsumerConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.put(<span class="string">"zookeeper.connect"</span>, KafkaProperties.zkConnect);</div><div class="line">        props.put(<span class="string">"group.id"</span>, KafkaProperties.groupId);</div><div class="line">        props.put(<span class="string">"zookeeper.session.timeout.ms"</span>, <span class="string">"40000"</span>);</div><div class="line">        props.put(<span class="string">"zookeeper.sync.time.ms"</span>, <span class="string">"200"</span>);</div><div class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConsumerConfig(props);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">        topicCountMap.put(topic, <span class="keyword">new</span> Integer(<span class="number">1</span>));</div><div class="line">        Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);</div><div class="line">        KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; stream = consumerMap.get(topic).get(<span class="number">0</span>);</div><div class="line">        ConsumerIterator&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; it = stream.iterator();</div><div class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">            System.out.println(<span class="string">"receive："</span> + <span class="keyword">new</span> String(it.next().message()));</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="简单的发送接收"><a href="#简单的发送接收" class="headerlink" title="简单的发送接收"></a>简单的发送接收</h2><p>运行下面这个程序，就可以进行简单的发送接收消息了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerProducerDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        KafkaProducer producerThread = <span class="keyword">new</span> KafkaProducer(KafkaProperties.topic);</div><div class="line">        producerThread.start();</div><div class="line">        KafkaConsumer consumerThread = <span class="keyword">new</span> KafkaConsumer(KafkaProperties.topic);</div><div class="line">        consumerThread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="高级别的consumer"><a href="#高级别的consumer" class="headerlink" title="高级别的consumer"></a>高级别的consumer</h2><p>下面是比较负载的发送接收的程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sohu.kafkademon;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerConfig;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerIterator;</div><div class="line"><span class="keyword">import</span> kafka.consumer.KafkaStream;</div><div class="line"><span class="keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConsumerConnector consumer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumer</span><span class="params">(String topic)</span> </span>&#123;</div><div class="line">        consumer = kafka.consumer.Consumer.createJavaConsumerConnector(</div><div class="line">                createConsumerConfig());</div><div class="line">        <span class="keyword">this</span>.topic = topic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ConsumerConfig <span class="title">createConsumerConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.put(<span class="string">"zookeeper.connect"</span>, KafkaProperties.zkConnect);</div><div class="line">        props.put(<span class="string">"group.id"</span>, KafkaProperties.groupId);</div><div class="line">        props.put(<span class="string">"zookeeper.session.timeout.ms"</span>, <span class="string">"40000"</span>);</div><div class="line">        props.put(<span class="string">"zookeeper.sync.time.ms"</span>, <span class="string">"200"</span>);</div><div class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConsumerConfig(props);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">        topicCountMap.put(topic, <span class="keyword">new</span> Integer(<span class="number">1</span>));</div><div class="line">        Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);</div><div class="line">        KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; stream = consumerMap.get(topic).get(<span class="number">0</span>);</div><div class="line">        ConsumerIterator&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; it = stream.iterator();</div><div class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">            System.out.println(<span class="string">"receive："</span> + <span class="keyword">new</span> String(it.next().message()));</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="四、数据持久化"><a href="#四、数据持久化" class="headerlink" title="四、数据持久化"></a>四、数据持久化</h1><h2 id="不要畏惧文件系统"><a href="#不要畏惧文件系统" class="headerlink" title="不要畏惧文件系统!"></a>不要畏惧文件系统!</h2><p>Kafka 大量依赖文件系统去存储和缓存消息。对于硬盘有个传统的观念是硬盘总是很慢，这使很多人怀疑基于文件系统的架构能否提供优异的性能。实际上硬盘的快慢完全取决于使用它的方式。设计良好的硬盘架构可以和内存一样快。</p>
<p>在 6 块 7200 转的 SATA RAID-5 磁盘阵列的线性写速度差不多是 600MB/s，但是随即写的速度却是 100k/s，差了差不多6000倍。现代的操作系统都对次做了大量的优化，使用了 read-ahead 和 write-behind 的技巧，读取的时候成块的预读取数据，写的时候将各种微小琐碎的逻辑写入组织合并成一次较大的物理写入。对此的深入讨论可以查看这里，它们发现线性的访问磁盘，很多时候比随机的内存访问快得多。</p>
<p>为了提高性能，现代操作系统往往使用内存作为磁盘的缓存，现代操作系统乐于把所有空闲内存用作磁盘缓存，虽然这可能在缓存回收和重新分配时牺牲一些性能。所有的磁盘读写操作都会经过这个缓存，这不太可能被绕开除非直接使用 I/O。所以虽然每个程序都在自己的线程里只缓存了一份数据，但在操作系统的缓存里还有一份，这等于存了两份数据。</p>
<p><strong>另外再来讨论一下 JVM，以下两个事实是众所周知的：</strong></p>
<ul>
<li>Java对象占用空间是非常大的，差不多是要存储的数据的两倍甚至更高。</li>
<li>随着堆中数据量的增加，垃圾回收回变的越来越困难。</li>
</ul>
<p>基于以上分析，如果把数据缓存在内存里，因为需要存储两份，不得不使用两倍的内存空间，Kafka 基于 JVM，又不得不将空间再次加倍,再加上要避免 GC 带来的性能影响，在一个 32G 内存的机器上，不得不使用到 28-30G 的内存空间。并且当系统重启的时候，又必须要将数据刷到内存中（10GB 内存差不多要用10分钟），就算使用冷刷新（不是一次性刷进内存，而是在使用数据的时候没有就刷到内存）也会导致最初的时候新能非常慢。但是使用文件系统，即使系统重启了，也不需要刷新数据。使用文件系统也简化了维护数据一致性的逻辑。</p>
<p>所以与传统的将数据缓存在内存中然后刷到硬盘的设计不同，Kafka 直接将数据写到了文件系统的日志中。</p>
<h2 id="常量时间的操作效率"><a href="#常量时间的操作效率" class="headerlink" title="常量时间的操作效率"></a>常量时间的操作效率</h2><p>在大多数的消息系统中，数据持久化的机制往往是为每个 cosumer 提供一个 B 树或者其他的随机读写的数据结构。B 树当然是很棒的，但是也带了一些代价：比如 B 树的复杂度是 O(log N)，O(log N) 通常被认为就是常量复杂度了，但对于硬盘操作来说并非如此。磁盘进行一次搜索需要 10ms，每个硬盘在同一时间只能进行一次搜索，这样并发处理就成了问题。虽然存储系统使用缓存进行了大量优化，但是对于树结构的性能的观察结果却表明，它的性能往往随着数据的增长而线性下降，数据增长一倍，速度就会降低一倍。</p>
<p>直观的讲，对于主要用于日志处理的消息系统，数据的持久化可以简单的通过将数据追加到文件中实现，读的时候从文件中读就好了。这样做的好处是读和写都是 O(1) 的，并且读操作不会阻塞写操作和其他操作。这样带来的性能优势是很明显的，因为性能和数据的大小没有关系了。</p>
<p>既然可以使用几乎没有容量限制（相对于内存来说）的硬盘空间建立消息系统，就可以在没有性能损失的情况下提供一些一般消息系统不具备的特性。比如，一般的消息系统都是在消息被消费后立即删除，Kafka 却可以将消息保存一段时间（比如一星期），这给 consumer 提供了很好的机动性和灵活性，这点在今后的文章中会有详述。</p>
<h1 id="五、消息传输的事务定义"><a href="#五、消息传输的事务定义" class="headerlink" title="五、消息传输的事务定义"></a>五、消息传输的事务定义</h1><p>之前讨论了 consumer 和 producer 是怎么工作的，现在来讨论一下数据传输方面。数据传输的事务定义通常有以下三种级别：</p>
<ol>
<li>最多一次: 消息不会被重复发送，最多被传输一次，但也有可能一次不传输。</li>
<li>最少一次: 消息不会被漏发送，最少被传输一次，但也有可能被重复传输。</li>
<li>精确的一次（Exactly once）: 不会漏传输也不会重复传输,每个消息都传输被一次而且仅仅被传输一次，这是大家所期望的。</li>
</ol>
<p>大多数消息系统声称可以做到 “精确的一次”，但是仔细阅读它们的的文档可以看到里面存在误导，比如没有说明当 consumer 或 producer 失败时怎么样，或者当有多个 consumer 并行时怎么样，或写入硬盘的数据丢失时又会怎么样。kafka 的做法要更先进一些。当发布消息时，Kafka 有一个 “committed” 的概念，一旦消息被提交了，只要消息被写入的分区的所在的副本 broker 是活动的，数据就不会丢失。关于副本的活动的概念，下节文档会讨论。现在假设 broker 是不会 down 的。</p>
<p>如果 producer 发布消息时发生了网络错误，但又不确定实在提交之前发生的还是提交之后发生的，这种情况虽然不常见，但是必须考虑进去，现在 Kafka 版本还没有解决这个问题，将来的版本正在努力尝试解决。</p>
<p>并不是所有的情况都需要 “精确的一次” 这样高的级别，Kafka 允许 producer 灵活的指定级别。比如 producer 可以指定必须等待消息被提交的通知，或者完全的异步发送消息而不等待任何通知，或者仅仅等待 leader 声明它拿到了消息（followers 没有必要）。</p>
<p>现在从 consumer 的方面考虑这个问题，所有的副本都有相同的日志文件和相同的 offset，consumer 维护自己消费的消息的 offset，如果 consumer 不会崩溃当然可以在内存中保存这个值，当然谁也不能保证这点。如果 consumer 崩溃了，会有另外一个 consumer 接着消费消息，它需要从一个合适的 offset 继续处理。这种情况下可以有以下选择：</p>
<ul>
<li>consumer 可以先读取消息，然后将 offset 写入日志文件中，然后再处理消息。这存在一种可能就是在存储 offset 后还没处理消息就 crash 了，新的 consumer 继续从这个 offset 处理，那么就会有些消息永远不会被处理，这就是上面说的 “最多一次”。</li>
<li>consumer 可以先读取消息，处理消息，最后记录 offset，当然如果在记录 offset 之前就 crash 了，新的 consumer 会重复的消费一些消息，这就是上面说的 “最少一次”。</li>
<li>“精确一次” 可以通过将提交分为两个阶段来解决：保存了 offset 后提交一次，消息处理成功之后再提交一次。但是还有个更简单的做法：将消息的 offset 和消息被处理后的结果保存在一起。比如用 Hadoop ETL 处理消息时，将处理后的结果和 offset 同时保存在 HDFS 中，这样就能保证消息和 offser 同时被处理了。</li>
</ul>
<h1 id="六、性能优化"><a href="#六、性能优化" class="headerlink" title="六、性能优化"></a>六、性能优化</h1><p>Kafka 在提高效率方面做了很大努力。Kafka 的一个主要使用场景是处理网站活动日志，吞吐量是非常大的，每个页面都会产生好多次写操作。读方面，假设每个消息只被消费一次，读的量的也是很大的，Kafka 也尽量使读的操作更轻量化。</p>
<p>我们之前讨论了磁盘的性能问题，线性读写的情况下影响磁盘性能问题大约有两个方面：太多的琐碎的 I/O 操作和太多的字节拷贝。I/O 问题发生在客户端和服务端之间，也发生在服务端内部的持久化的操作中。</p>
<h2 id="消息集（message-set）"><a href="#消息集（message-set）" class="headerlink" title="消息集（message set）"></a>消息集（message set）</h2><p>为了避免这些问题，Kafka 建立了 “消息集（message set）” 的概念，将消息组织到一起，作为处理的单位。以消息集为单位处理消息，比以单个的消息为单位处理，会提升不少性能。Producer 把消息集一块发送给服务端，而不是一条条的发送；服务端把消息集一次性的追加到日志文件中，这样减少了琐碎的 I/O 操作。consumer 也可以一次性的请求一个消息集。</p>
<p>另外一个性能优化是在字节拷贝方面。在低负载的情况下这不是问题，但是在高负载的情况下它的影响还是很大的。为了避免这个问题，Kafka 使用了标准的二进制消息格式，这个格式可以在 producer，broker 和 producer 之间共享而无需做任何改动。</p>
<h2 id="zero-copy"><a href="#zero-copy" class="headerlink" title="zero copy"></a>zero copy</h2><p>Broker 维护的消息日志仅仅是一些目录文件，消息集以固定队的格式写入到日志文件中，这个格式 producer 和 consumer 是共享的，这使得 Kafka 可以一个很重要的点进行优化：消息在网络上的传递。现代的 unix 操作系统提供了高性能的将数据从页面缓存发送到 socket 的系统函数，在 linux 中，这个函数是 sendfile。</p>
<p>为了更好的理解 sendfile 的好处，我们先来看下一般将数据从文件发送到 socket 的数据流向：</p>
<ol>
<li>操作系统把数据从文件拷贝内核中的页缓存中</li>
<li>应用程序从页缓存从把数据拷贝自己的内存缓存中</li>
<li>应用程序将数据写入到内核中 socket 缓存中操作系统把数据从 socket 缓存中拷贝到网卡接口缓存，从这里发送到网络上。</li>
</ol>
<p>这显然是低效率的，有 4 次拷贝和 2 次系统调用。Sendfile 通过直接将数据从页面缓存发送网卡接口缓存，避免了重复拷贝，大大的优化了性能。</p>
<p>在一个多 consumers 的场景里，数据仅仅被拷贝到页面缓存一次而不是每次消费消息的时候都重复的进行拷贝。这使得消息以近乎网络带宽的速率发送出去。这样在磁盘层面你几乎看不到任何的读操作，因为数据都是从页面缓存中直接发送到网络上去了。</p>
<p><a href="https://www.ibm.com/developerworks/linux/library/j-zerocopy/" target="_blank" rel="external">这篇文章</a>详细介绍了 sendfile 和 zero-copy 技术在 Java 方面的应用。</p>
<h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><p>很多时候，性能的瓶颈并非 CPU 或者硬盘而是网络带宽，对于需要在数据中心之间传送大量数据的应用更是如此。当然用户可以在没有 Kafka 支持的情况下各自压缩自己的消息，但是这将导致较低的压缩率，因为相比于将消息单独压缩，将大量文件压缩在一起才能起到最好的压缩效果。</p>
<p>Kafka 采用了端到端的压缩：因为有 “消息集” 的概念，客户端的消息可以一起被压缩后送到服务端，并以压缩后的格式写入日志文件，以压缩的格式发送到 consumer，消息从 producer 发出到 consumer 拿到都被是压缩的，只有在 consumer 使用的时候才被解压缩，所以叫做 “端到端的压缩”。</p>
<p>Kafka 支持 GZIP 和 Snappy 压缩协议。更详细的内容可以查看<a href="https://cwiki.apache.org/confluence/display/KAFKA/Compression" target="_blank" rel="external">这里</a>。</p>
<h1 id="七、Producer-和-Consumer"><a href="#七、Producer-和-Consumer" class="headerlink" title="七、Producer 和 Consumer"></a>七、Producer 和 Consumer</h1><h2 id="Kafka-Producer-消息发送"><a href="#Kafka-Producer-消息发送" class="headerlink" title="Kafka Producer 消息发送"></a>Kafka Producer 消息发送</h2><p>producer 直接将数据发送到 broker 的 leader（主节点），不需要在多个节点进行分发。为了帮助 producer 做到这点，所有的 Kafka 节点都可以及时的告知：哪些节点是活动的，目标 topic 目标分区的 leader 在哪。这样 producer 就可以直接将消息发送到目的地了。</p>
<p>客户端控制消息将被分发到哪个分区。可以通过负载均衡随机的选择，或者使用分区函数。Kafka 允许用户实现分区函数，指定分区的 key，将消息 hash 到不同的分区上（当然有需要的话，也可以覆盖这个分区函数自己实现逻辑）。比如如果你指定的 key 是 user id，那么同一个用户发送的消息都被发送到同一个分区上。经过分区之后，consumer 就可以有目的的消费某个分区的消息。</p>
<h3 id="异步发送"><a href="#异步发送" class="headerlink" title="异步发送"></a>异步发送</h3><p>批量发送可以很有效的提高发送效率。Kafka producer 的异步发送模式允许进行批量发送，先将消息缓存在内存中，然后一次请求批量发送出去。这个策略可以配置的，比如可以指定缓存的消息达到某个量的时候就发出去，或者缓存了固定的时间后就发送出去（比如 100 条消息就发送，或者每 5 秒发送一次）。这种策略将大大减少服务端的 I/O 次数。</p>
<p>既然缓存是在 producer 端进行的，那么当 producer 崩溃时，这些消息就会丢失。Kafka 0.8.1 的异步发送模式还不支持回调，就不能在发送出错时进行处理。Kafka 0.9 可能会增加这样的回调函数。见 <a href="https://cwiki.apache.org/confluence/display/KAFKA/Client+Rewrite#ClientRewrite-ProposedProducerAPI" target="_blank" rel="external">Proposed Producer API</a>。</p>
<h2 id="Kafka-Consumer"><a href="#Kafka-Consumer" class="headerlink" title="Kafka Consumer"></a>Kafka Consumer</h2><p>Kafa consumer 消费消息时，向broker发出 <code>fetch</code> 请求去消费特定分区的消息。consumer 指定消息在日志中的偏移量（offset），就可以消费从这个位置开始的消息。customer 拥有了 offset 的控制权，可以向后回滚去重新消费之前的消息，这是很有意义的。</p>
<h3 id="推还是拉？"><a href="#推还是拉？" class="headerlink" title="推还是拉？"></a>推还是拉？</h3><p>Kafka 最初考虑的问题是，customer 应该从 brokes 拉取消息还是 brokers 将消息推送到 consumer，也就是 pull 还 push。在这方面，Kafka 遵循了一种大部分消息系统共同的传统的设计：producer 将消息推送到 broker，consumer 从 broker 拉取消息。</p>
<p>一些消息系统比如 Scribe 和 Apache Flume 采用了push 模式，将消息推送到下游的 consumer。这样做有好处也有坏处：由 broker 决定消息推送的速率，对于不同消费速率的 consumer 就不太好处理了。消息系统都致力于让 consumer 以最大的速率最快速的消费消息，但不幸的是，push 模式下，当 broker 推送的速率远大于 consumer 消费的速率时，consumer 恐怕就要崩溃了。最终 Kafka 还是选取了传统的 pull 模式。</p>
<p>Pull 模式的另外一个好处是 consumer 可以自主决定是否批量的从 broker 拉取数据。Push 模式必须在不知道下游 consumer 消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。如果为了避免 consumer 崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。Pull 模式下，consumer 就可以根据自己的消费能力去决定这些策略。</p>
<p>Pull 有个缺点是，如果 broker 没有可供消费的消息，将导致 consumer 不断在循环中轮询，直到新消息到 t 达。为了避免这点，Kafka 有个参数可以让 consumer 阻塞知道新消息到达（当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送）。</p>
<h3 id="消费状态跟踪"><a href="#消费状态跟踪" class="headerlink" title="消费状态跟踪"></a>消费状态跟踪</h3><p>对消费消息状态的记录也是很重要的。</p>
<p>大部分消息系统在 broker 端的维护消息被消费的记录：一个消息被分发到 consumer 后 broker 就马上进行标记或者等待 customer  的通知后进行标记。这样也可以在消息在消费后立马就删除以减少空间占用。</p>
<p><strong>但是这样会不会有什么问题呢</strong>？如果一条消息发送出去之后就立即被标记为消费过的，一旦 consumer 处理消息时失败了（比如程序崩溃）消息就丢失了。为了解决这个问题，很多消息系统提供了另外一个个功能：当消息被发送出去之后仅仅被标记为已发送状态，当接到 consumer 已经消费成功的通知后才标记为已被消费的状态。这虽然解决了消息丢失的问题，但产生了新问题，首先如果 consumer 处理消息成功了但是向 broker 发送响应时失败了，这条消息将被消费两次。第二个问题时，broker 必须维护每条消息的状态，并且每次都要先锁住消息然后更改状态然后释放锁。这样麻烦又来了，且不说要维护大量的状态数据，比如如果消息发送出去但没有收到消费成功的通知，这条消息将一直处于被锁定的状态，<br>Kafka 采用了不同的策略。Topic 被分成了若干分区，每个分区在同一时间只被一个 consumer 消费。这意味着每个分区被消费的消息在日志中的位置仅仅是一个简单的整数：offset。这样就很容易标记每个分区消费状态就很容易了，仅仅需要一个整数而已。这样消费状态的跟踪就很简单了。</p>
<p>这带来了另外一个好处：consumer 可以把 offset 调成一个较老的值，去重新消费老的消息。这对传统的消息系统来说看起来有些不可思议，但确实是非常有用的，谁规定了一条消息只能被消费一次呢？consumer发现解析数据的程序有 bug，在修改 bug 后再来解析一次消息，看起来是很合理的额呀！</p>
<h3 id="离线处理消息"><a href="#离线处理消息" class="headerlink" title="离线处理消息"></a>离线处理消息</h3><p>高级的数据持久化允许 consumer 每个隔一段时间批量的将数据加载到线下系统中比如 <a href="http://www.linuxidc.com/topicnews.aspx?tid=13" target="_blank" rel="external">Hadoop</a> 或者数据仓库。这种情况下，Hadoop 可以将加载任务分拆，拆成每个 broker 或每个 topic 或每个分区一个加载任务。Hadoop 具有任务管理功能，当一个任务失败了就可以重启而不用担心数据被重新加载，只要从上次加载的位置继续加载消息就可以了。</p>
<h1 id="八、主从同步"><a href="#八、主从同步" class="headerlink" title="八、主从同步"></a>八、主从同步</h1><p>Kafka 允许 topic 的分区拥有若干副本，这个数量是可以配置的，你可以为每个 topic 配置副本的数量。Kafka 会自动在每个个副本上备份数据，所以当一个节点 down 掉时数据依然是可用的。</p>
<p>Kafka 的副本功能不是必须的，你可以配置只有一个副本，这样其实就相当于只有一份数据。</p>
<p>创建副本的单位是 topic 的分区，每个分区都有一个 leader 和零或多个 followers。所有的读写操作都由 leader 处理，一般分区的数量都比 broker 的数量多的多，各分区的 leader 均匀的分布在 brokers 中。所有的 followers 都复制 leader 的日志，日志中的消息和顺序都和 leader 中的一致。flowers 向普通的 consumer 那样从 leader 那里拉取消息并保存在自己的日志文件中。</p>
<p>许多分布式的消息系统自动的处理失败的请求，它们对一个节点是否存活着（alive）有着清晰的定义。Kafka 判断一个节点是否活着有两个条件：</p>
<ol>
<li>节点必须可以维护和 ZooKeeper 的连接，Zookeeper 通过心跳机制检查每个节点的连接。</li>
<li>如果节点是个 follower，他必须能及时的同步 leader 的写操作，延时不能太久。</li>
</ol>
<p>符合以上条件的节点准确的说应该是“同步中的（in sync）”，而不是模糊的说是 “活着的” 或是 “失败的”。Leader 会追踪所有 “同步中” 的节点，一旦一个 down 掉了，或是卡住了，或是延时太久，leader 就会把它移除。至于延时多久算是 “太久”，是由参数 <code>replica.lag.max.messages</code> 决定的，怎样算是卡住了，怎是由参数 <code>replica.lag.time.max.ms</code> 决定的。</p>
<p>只有当消息被所有的副本加入到日志中时，才算是 “committed”，只有 committed 的消息才会发送给 consumer，这样就不用担心一旦 leader down 掉了消息会丢失。Producer 也可以选择是否等待消息被提交的通知，这个是由参数 <code>request.required.acks</code> 决定的。</p>
<p>Kafka 保证只要有一个 “同步中” 的节点，“committed” 的消息就不会丢失。</p>
<h2 id="Leader的选择"><a href="#Leader的选择" class="headerlink" title="Leader的选择"></a>Leader的选择</h2><p>Kafka 的核心是日志文件，日志文件在集群中的同步是分布式数据系统最基础的要素。</p>
<p>如果leaders永远不会down的话我们就不需要followers了！一旦leader down掉了，需要在followers中选择一个新的leader.但是followers本身有可能延时太久或者crash，所以必须选择高质量的follower作为leader.必须保证，一旦一个消息被提交了，但是leader down掉了，新选出的leader必须可以提供这条消息。大部分的分布式系统采用了多数投票法则选择新的leader,对于多数投票法则，就是根据所有副本节点的状况动态的选择最适合的作为leader.Kafka并不是使用这种方法。</p>
<p>Kafaka动态维护了一个同步状态的副本的集合（a set of in-sync replicas），简称ISR，在这个集合中的节点都是和leader保持高度一致的，任何一条消息必须被这个集合中的每个节点读取并追加到日志中了，才回通知外部这个消息已经被提交了。因此这个集合中的任何一个节点随时都可以被选为leader.ISR在ZooKeeper中维护。ISR中有f+1个节点，就可以允许在f个节点down掉的情况下不会丢失消息并正常提供服。ISR的成员是动态的，如果一个节点被淘汰了，当它重新达到“同步中”的状态时，他可以重新加入ISR.这种leader的选择方式是非常快速的，适合kafka的应用场景。</p>
<p>一个邪恶的想法：如果所有节点都down掉了怎么办？Kafka对于数据不会丢失的保证，是基于至少一个节点是存活的，一旦所有节点都down了，这个就不能保证了。<br>实际应用中，当所有的副本都down掉时，必须及时作出反应。可以有以下两种选择:</p>
<ol>
<li>等待ISR中的任何一个节点恢复并担任leader。</li>
<li>选择所有节点中（不只是ISR）第一个恢复的节点作为leader.</li>
</ol>
<p>这是一个在可用性和连续性之间的权衡。如果等待ISR中的节点恢复，一旦ISR中的节点起不起来或者数据都是了，那集群就永远恢复不了了。如果等待ISR意外的节点恢复，这个节点的数据就会被作为线上数据，有可能和真实的数据有所出入，因为有些数据它可能还没同步到。Kafka目前选择了第二种策略，在未来的版本中将使这个策略的选择可配置，可以根据场景灵活的选择。<br>这种窘境不只Kafka会遇到，几乎所有的分布式数据系统都会遇到。</p>
<h2 id="副本管理"><a href="#副本管理" class="headerlink" title="副本管理"></a>副本管理</h2><p>以上仅仅以一个topic一个分区为例子进行了讨论，但实际上一个Kafka将会管理成千上万的topic分区.Kafka尽量的使所有分区均匀的分布到集群所有的节点上而不是集中在某些节点上，另外主从关系也尽量均衡这样每个几点都会担任一定比例的分区的leader。</p>
<p>优化leader的选择过程也是很重要的，它决定了系统发生故障时的空窗期有多久。Kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.</p>
<h1 id="九、客户端API"><a href="#九、客户端API" class="headerlink" title="九、客户端API"></a>九、客户端API</h1><h2 id="Kafka-Producer-APIs"><a href="#Kafka-Producer-APIs" class="headerlink" title="Kafka Producer APIs"></a>Kafka Producer APIs</h2><p>Procuder API有两种：kafka.producer.SyncProducer和kafka.producer.async.AsyncProducer.它们都实现了同一个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</div><div class="line">    <span class="comment">/* 将消息发送到指定分区 */</span></div><div class="line">    <span class="function">publicvoid <span class="title">send</span><span class="params">(kafka.javaapi.producer.ProducerData&lt;K,V&gt; producerData)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/* 批量发送一批消息 */</span></div><div class="line">    <span class="function">publicvoid <span class="title">send</span><span class="params">(java.util.List&lt;kafka.javaapi.producer.ProducerData&lt;K,V&gt;&gt; producerData)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/* 关闭producer */</span></div><div class="line">    <span class="function">publicvoid <span class="title">close</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Producer API提供了以下功能：</strong></p>
<ol>
<li>可以将多个消息缓存到本地队列里，然后异步的批量发送到broker，可以通过参数producer.type=async做到。缓存的大小可以通过一些参数指定：queue.time和batch.size。一个后台线程（(kafka.producer.async.ProducerSendThread）从队列中取出数据并让kafka.producer.EventHandler将消息发送到broker，也可以通过参数event.handler定制handler，在producer端处理数据的不同的阶段注册处理器，比如可以对这一过程进行日志追踪，或进行一些监控。只需实现kafka.producer.async.CallbackHandler接口，并在callback.handler中配置。</li>
<li><p>自己编写Encoder来序列化消息，只需实现下面这个接口。默认的Encoder是kafka.serializer.DefaultEncoder。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Encoder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">toMessage</span><span class="params">(T data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>提供了基于Zookeeper的broker自动感知能力，可以通过参数zk.connect实现。如果不使用Zookeeper，也可以使用broker.list参数指定一个静态的brokers列表，这样消息将被随机的发送到一个broker上，一旦选中的broker失败了，消息发送也就失败了。</p>
</li>
<li><p>通过分区函数kafka.producer.Partitioner类对消息分区。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Partitioner</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(T key, <span class="keyword">int</span> numPartitions)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>分区函数有两个参数：key和可用的分区数量，从分区列表中选择一个分区并返回id。默认的分区策略是hash(key)%numPartitions.如果key是null,就随机的选择一个。可以通过参数partitioner.class定制分区函数。</p>
</li>
</ol>
<h2 id="KafKa-Consumer-APIs"><a href="#KafKa-Consumer-APIs" class="headerlink" title="KafKa Consumer APIs"></a>KafKa Consumer APIs</h2><p>Consumer API有两个级别。低级别的和一个指定的broker保持连接，并在接收完消息后关闭连接，这个级别是无状态的，每次读取消息都带着offset。</p>
<p>高级别的API隐藏了和brokers连接的细节，在不必关心服务端架构的情况下和服务端通信。还可以自己维护消费状态，并可以通过一些条件指定订阅特定的topic,比如白名单黑名单或者正则表达式。</p>
<h3 id="低级别的API"><a href="#低级别的API" class="headerlink" title="低级别的API"></a>低级别的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleConsumer</span> </span>&#123;</div><div class="line">    <span class="comment">/*向一个broker发送读取请求并得到消息集 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ByteBufferMessageSet <span class="title">fetch</span><span class="params">(FetchRequest request)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/*向一个broker发送读取请求并得到一个相应集 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MultiFetchResponse <span class="title">multifetch</span><span class="params">(List&lt;FetchRequest&gt; fetches)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 得到指定时间之前的offsets</div><div class="line">    * 返回值是offsets列表，以倒序排序</div><div class="line">    * <span class="doctag">@param</span> time: 时间，毫秒,</div><div class="line">    * 如果指定为OffsetRequest$.MODULE$.LATIEST_TIME(), 得到最新的offset.</div><div class="line">    * 如果指定为OffsetRequest$.MODULE$.EARLIEST_TIME(),得到最老的offset.</div><div class="line">    */</div><div class="line">    publiclong[] getOffsetsBefore(String topic, <span class="keyword">int</span> partition, <span class="keyword">long</span> time, <span class="keyword">int</span> maxNumOffsets);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>低级别的API是高级别API实现的基础，也是为了一些对维持消费状态有特殊需求的场景，比如Hadoop consumer这样的离线consumer。</p>
<h3 id="高级别的API"><a href="#高级别的API" class="headerlink" title="高级别的API"></a>高级别的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 创建连接 */</span></div><div class="line">ConsumerConnector connector = Consumer.create(consumerConfig);</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ConsumerConnector</span> </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 这个方法可以得到一个流的列表，每个流都是MessageAndMetadata的迭代，</div><div class="line">* 通过MessageAndMetadata可以拿到消息和其他的元数据（目前之后topic）</div><div class="line">* Input: a map of &lt;topic, #streams&gt;</div><div class="line">* Output: a map of &lt;topic, list of message streams&gt;</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> Map&lt;String,List&lt;KafkaStream&gt;&gt; createMessageStreams(Map&lt;String,Int&gt; topicCountMap);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 你也可以得到一个流的列表，它包含了符合TopicFiler的消息的迭代，</div><div class="line">* 一个TopicFilter是一个封装了白名单或黑名单的正则表达式。</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;KafkaStream&gt; <span class="title">createMessageStreamsByFilter</span><span class="params">(</span></span></div><div class="line">    TopicFilter topicFilter, <span class="keyword">int</span> numStreams);</div><div class="line">    </div><div class="line">    <span class="comment">/* 提交目前消费到的offset */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">commitOffsets</span><span class="params">()</span></span></div><div class="line">    </div><div class="line">    <span class="comment">/* 关闭连接 */</span></div><div class="line">    <span class="keyword">public</span> <span class="title">shutdown</span><span class="params">()</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个API围绕着由KafkaStream实现的迭代器展开，每个流代表一系列从一个或多个分区多和broker上汇聚来的消息，每个流由一个线程处理，所以客户端可以在创建的时候通过参数指定想要几个流。一个流是多个分区多个broker的合并，但是每个分区的消息只会流向一个流。</p>
<p>每调用一次createMessageStreams都会将consumer注册到topic上，这样consumer和brokers之间的负载均衡就会进行调整。API鼓励每次调用创建更多的topic流以减少这种调整。createMessageStreamsByFilter方法注册监听可以感知新的符合filter的tipic。</p>
<h1 id="十、消息和日志"><a href="#十、消息和日志" class="headerlink" title="十、消息和日志"></a>十、消息和日志</h1><p>消息由一个固定长度的头部和可变长度的字节数组组成。头部包含了一个版本号和CRC32校验码。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/<span class="symbol">*</span><span class="symbol">*</span></div><div class="line"><span class="symbol">*</span> 具有N个字节的消息的格式如下</div><div class="line"></div><div class="line"><span class="symbol">*</span> 如果版本号是0</div><div class="line"><span class="symbol">*</span> 1. 1个字节的 <span class="string">"magic"</span> 标记</div><div class="line"><span class="symbol">*</span> 2. 4个字节的CRC32校验码</div><div class="line"><span class="symbol">*</span> 3. N - 5个字节的具体信息</div><div class="line"><span class="symbol">*</span></div><div class="line"><span class="symbol">*</span> 如果版本号是1</div><div class="line"><span class="symbol">*</span> 1. 1个字节的 <span class="string">"magic"</span> 标记</div><div class="line"><span class="symbol">*</span> 2.1个字节的参数允许标注一些附加的信息比如是否压缩了，解码类型等</div><div class="line"><span class="symbol">*</span> 3.4个字节的CRC32校验码</div><div class="line"><span class="symbol">*</span> 4. N - 6 个字节的具体信息</div><div class="line"><span class="symbol">*</span>/</div></pre></td></tr></table></figure>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>一个叫做“my_topic”且有两个分区的的topic,它的日志有两个文件夹组成，my_topic_0和my_topic_1,每个文件夹里放着具体的数据文件，每个数据文件都是一系列的日志实体，每个日志实体有一个4个字节的整数N标注消息的长度，后边跟着N个字节的消息。每个消息都可以由一个64位的整数offset标注，offset标注了这条消息在发送到这个分区的消息流中的起始位置。每个日志文件的名称都是这个文件第一条日志的offset.所以第一个日志文件的名字就是00000000000.kafka.所以每相邻的两个文件名字的差就是一个数字S,S差不多就是配置文件中指定的日志文件的最大容量。</p>
<p>消息的格式都由一个统一的接口维护，所以消息可以在producer,broker和consumer之间无缝的传递。存储在硬盘上的消息格式如下所示：</p>
<ol>
<li>消息长度: 4 bytes (value: 1+4+n)</li>
<li>版本号: 1 byte</li>
<li>CRC校验码: 4 bytes</li>
<li>具体的消息: n bytes</li>
</ol>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161009005.png" alt=""></p>
<h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><p>消息被不断的追加到最后一个日志的末尾，当日志的大小达到一个指定的值时就会产生一个新的文件。对于写操作有两个参数，一个规定了消息的数量达到这个值时必须将数据刷新到硬盘上，另外一个规定了刷新到硬盘的时间间隔，这对数据的持久性是个保证，在系统崩溃的时候只会丢失一定数量的消息或者一个时间段的消息。</p>
<h2 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h2><p>需要两个参数：一个64位的offset和一个S字节的最大读取量。S通常比单个消息的大小要大，但在一些个别消息比较大的情况下，S会小于单个消息的大小。这种情况下读操作会不断重试，每次重试都会将读取量加倍，直到读取到一个完整的消息。可以配置单个消息的最大值，这样服务器就会拒绝大小超过这个值的消息。也可以给客户端指定一个尝试读取的最大上限，避免为了读到一个完整的消息而无限次的重试。</p>
<p>在实际执行读取操纵时，首先需要定位数据所在的日志文件，然后根据offset计算出在这个日志中的offset(前面的的offset是整个分区的offset),然后在这个offset的位置进行读取。定位操作是由二分查找法完成的，Kafka在内存中为每个文件维护了offset的范围。</p>
<p>下面是发送给consumer的结果的格式：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="type">MessageSetSend</span> (fetch <span class="literal">result</span>)</div><div class="line"></div><div class="line">total length     : <span class="number">4</span> bytes</div><div class="line">error code       : <span class="number">2</span> bytes</div><div class="line">message <span class="number">1</span>        : x bytes</div><div class="line">...</div><div class="line">message n        : x bytes</div><div class="line"><span class="type">MultiMessageSetSend</span> (multiFetch <span class="literal">result</span>)</div><div class="line"></div><div class="line">total length       : <span class="number">4</span> bytes</div><div class="line">error code         : <span class="number">2</span> bytes</div><div class="line">messageSetSend <span class="number">1</span></div><div class="line">...</div><div class="line">messageSetSend n</div></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>日志管理器允许定制删除策略。目前的策略是删除修改时间在N天之前的日志（按时间删除），也可以使用另外一个策略：保留最后的N GB数据的策略(按大小删除)。为了避免在删除时阻塞读操作，采用了copy-on-write形式的实现，删除操作进行时，读取操作的二分查找功能实际是在一个静态的快照副本上进行的，这类似于Java的CopyOnWriteArrayList。</p>
<h2 id="可靠性保证"><a href="#可靠性保证" class="headerlink" title="可靠性保证"></a>可靠性保证</h2><p>日志文件有一个可配置的参数M，缓存超过这个数量的消息将被强行刷新到硬盘。一个日志矫正线程将循环检查最新的日志文件中的消息确认每个消息都是合法的。合法的标准为：所有文件的大小的和最大的offset小于日志文件的大小，并且消息的CRC32校验码与存储在消息实体中的校验码一致。如果在某个offset发现不合法的消息，从这个offset到下一个合法的offset之间的内容将被移除。</p>
<p>有两种情况必须考虑：</p>
<ol>
<li>当发生崩溃时有些数据块未能写入。</li>
<li>写入了一些空白数据块。第二种情况的原因是，对于每个文件，操作系统都有一个inode（inode是指在许多“类Unix文件系统”中的一种数据结构。每个inode保存了文件系统中的一个文件系统对象,包括文件、目录、大小、设备文件、socket、管道, 等等），但无法保证更新inode和写入数据的顺序，当inode保存的大小信息被更新了，但写入数据时发生了崩溃，就产生了空白数据块。CRC校验码可以检查这些块并移除，当然因为崩溃而未写入的数据块也就丢失了。</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Kafka 是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个独特的设计是什么样的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先让我们看几个基本的消息系统术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 将消息以 topic 为单位进行归纳&lt;/li&gt;
&lt;li&gt;将向 Kafka topic 发布消息的程序成为 producers&lt;/li&gt;
&lt;li&gt;将预订 topics 并消费消息的程序成为 consumer&lt;/li&gt;
&lt;li&gt;Kafka 以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个 broker&lt;/li&gt;
&lt;li&gt;producers 通过网络将消息发送到 Kafka集群，集群向消费者提供消息，如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20161009001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java开发技术" scheme="http://ehlxr.me/categories/Java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Kafka" scheme="http://ehlxr.me/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>闲言碎语，不知所云...</title>
    <link href="http://ehlxr.me/2016/09/28/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD%EF%BC%8C%E4%B8%8D%E7%9F%A5%E6%89%80%E4%BA%91/"/>
    <id>http://ehlxr.me/2016/09/28/闲言碎语，不知所云/</id>
    <published>2016-09-28T05:34:18.000Z</published>
    <updated>2016-09-28T05:03:07.271Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>闲言碎语，不知所云，乱七八糟，聊以自慰…</p>
</blockquote>
<p>搭建博客有一段时间了，记录总结的基本都是技术相关的，对于一个有强迫症加语文学的不好的人来说，总结技术文章太痛苦了，总结一篇文章得纠结好久，总觉得组织的语言不够恰当准确，每次都是改了又改，反复琢磨，怎奈肚子里的墨水实在是少的可怜，真是羡慕那些可以把自己心里所想的东西用文字能够表达很清楚的人。</p>
<p>说到底还是看的东西少，缺少写东西的锻炼，青春迷茫的时候有大把机会可以利用，可惜都不知道把时间用在了哪儿，等慢慢想要沉淀的时候才发现工作和生活中琐碎已经占据了所有的时间。但不管怎样，从此刻启程，做一些自己想要做的事儿，我想应该不会太晚吧！</p>
<a id="more"></a>
<p>搭建 Hexo 博客的初衷之一是觉得对于身为码农的我来说，Hexo 好玩，有新鲜感，对于非码农来说有一定的门槛（显的逼格高）。之二就是书写简单，不必局限于单一的编辑工具，少了刻意去追求排版样式烦恼。之三是觉得安全可靠，文章资源一切都可以掌控与自己，不必担心丢失，之前也买过 VPS 摆弄过 WordPress ，最后 VPS 租期到了，那段时间忙于找工作，博客的内容也没有及时保存下来，虽说博客没多少东西，但始终觉得有些遗憾…</p>
<p>夜深人不静，半夜公司楼下打车真是不好打。这几天每天到家都凌晨以后了，身体真是大不如前了…</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;闲言碎语，不知所云，乱七八糟，聊以自慰…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搭建博客有一段时间了，记录总结的基本都是技术相关的，对于一个有强迫症加语文学的不好的人来说，总结技术文章太痛苦了，总结一篇文章得纠结好久，总觉得组织的语言不够恰当准确，每次都是改了又改，反复琢磨，怎奈肚子里的墨水实在是少的可怜，真是羡慕那些可以把自己心里所想的东西用文字能够表达很清楚的人。&lt;/p&gt;
&lt;p&gt;说到底还是看的东西少，缺少写东西的锻炼，青春迷茫的时候有大把机会可以利用，可惜都不知道把时间用在了哪儿，等慢慢想要沉淀的时候才发现工作和生活中琐碎已经占据了所有的时间。但不管怎样，从此刻启程，做一些自己想要做的事儿，我想应该不会太晚吧！&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Oh My Zsh 替换你的 Bash Shell</title>
    <link href="http://ehlxr.me/2016/09/24/Oh-My-Zsh-%E6%9B%BF%E6%8D%A2%E4%BD%A0%E7%9A%84-Bash-Shell/"/>
    <id>http://ehlxr.me/2016/09/24/Oh-My-Zsh-替换你的-Bash-Shell/</id>
    <published>2016-09-24T04:31:21.000Z</published>
    <updated>2016-09-25T06:49:14.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p>
<blockquote class="blockquote-center"><a href="http://ohmyz.sh/" target="_blank" rel="external">Oh My ZSH!</a></blockquote>

</blockquote>
<p><img src="http://oapjp6spr.bkt.clouddn.com/OMZLogo_BnW.png" alt="Oh My Zsh"></p>
<h2 id="1-Oh-My-Zsh-简介"><a href="#1-Oh-My-Zsh-简介" class="headerlink" title="1. Oh My Zsh 简介"></a>1. Oh My Zsh 简介</h2><p>　　无意中看见了 Linux 的一款 Shell，相比于 Bash 极其美艳，决定入坑试水一下，不试不知道，一试绝对有惊喜，不仅外观美艳而且功能强大，那还有不替换 Bash 的理由吗？搞起搞起……</p>
<a id="more"></a>
<p>　　Linux 提供了很多种 Shell ，想要查看系统有安装哪些 Shell 可以通过命令：<code>chsh -l</code> 或者 <code>cat /etc/shells</code> 进行查看。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/shells </div><div class="line">/bin/sh</div><div class="line">/bin/bash</div><div class="line">/sbin/nologin</div><div class="line">/usr/bin/sh</div><div class="line">/usr/bin/bash</div><div class="line">/usr/sbin/nologin</div></pre></td></tr></table></figure>
<p>　　其中 Bash 是绝大多数 Linux 系统默认的 Shell，虽然 Zsh Shell 没有被所有 Linux 预安装，但几乎每一款 Linux 都包含 Zsh Shell， 根据不同版本的 Linux 可以用 apt-get、yum 等包管理器进行安装。</p>
<p>　　但是我们今天介绍的并非是 Zsh，而是 Oh My Zsh，这是个什么鬼了？虽说 Zsh Shell 很牛逼，但配置相当麻烦，所以阻挡了好多人尝试的勇气（我想这也是为啥 Zsh 不被 Linux 设为默认 Shell 的原因吧），但是永远不要低估一个爱折腾程序猿的创造力，国外一程序猿真就创造出了一款易于使用的 Zsh 版本：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">Oh My Zsh</a></p>
<p>　　Oh My Zsh 几乎兼容日常使用的所有 Bash Shell 指令，让你可以无缝接入，不需要再去花额外的时间去适应。当然还扩展了大量炫酷的指令，要不然干嘛用它对吧，而且支持更换主题和插件机制。下面就开始搞起吧！</p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>　　安装 Oh My Zsh 首先需要安装 git 和 zsh，如果已经安装，请自行忽略。本文是基于 CentOS 介绍，其它 Linux 大致相同。</p>
<ul>
<li><h3 id="git-和-zsh-安装"><a href="#git-和-zsh-安装" class="headerlink" title="git 和 zsh 安装"></a>git 和 zsh 安装</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># git</div><div class="line">sodu yum install git</div><div class="line"></div><div class="line"># zsh</div><div class="line">sodu yum install zsh</div></pre></td></tr></table></figure>
</li>
<li><h3 id="Oh-My-Zsh-安装"><a href="#Oh-My-Zsh-安装" class="headerlink" title="Oh My Zsh 安装"></a>Oh My Zsh 安装</h3><p>  Oh My Zsh 提供了 <code>curl</code> 和 <code>wget</code> 两种安装方式，选择任意一种自己方便的方式即可。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># via curl</div><div class="line">sudo sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div><div class="line"></div><div class="line"># via wget</div><div class="line">sudo sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-配置使用"><a href="#3-配置使用" class="headerlink" title="3. 配置使用"></a>3. 配置使用</h2><ul>
<li><h3 id="切换-Shell"><a href="#切换-Shell" class="headerlink" title="切换 Shell"></a>切换 Shell</h3><p>  安装完成之后，使用以下命令即可切换当前 Shell：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/zsh</div></pre></td></tr></table></figure>
<p>  退出当前终端连接，再次登入即可看到当前的 Shell 已经成功更改为 Oh My Zsh。</p>
</li>
<li><h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><p>  Oh My Zsh 的配置文件路径为：<code>~/.zshrc</code>，配置文件中的 <code>ZSH_THEME</code> 就是主题配置字段，如下默认为 <code>robbyrussell</code> 主题配色。更多主题配色可参考 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="external">Oh My Zsh 主题</a>，这里我推荐是用 <code>ys</code> 主题。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;robbyrussell&quot;</div></pre></td></tr></table></figure>
</li>
<li><h3 id="其它-Linux-用户配置使用"><a href="#其它-Linux-用户配置使用" class="headerlink" title="其它 Linux 用户配置使用"></a>其它 Linux 用户配置使用</h3><p>  Linux 其它用户想要使用 Oh My Zsh Shell，只需要拷贝当前用户家目录下的 <code>~/.zshrc</code> 配置文件到当想要使用 Oh My Zsh Shell 用户的家目录下即可。需要注意的是配置文件中 Oh My Zsh 安装路径其它用户可以访问的到，所以最好更改为绝对路径，如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export ZSH=/home/ehlxr/.oh-my-zsh</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-插件配置"><a href="#4-插件配置" class="headerlink" title="4. 插件配置"></a>4. 插件配置</h2><p>　　Oh My Zsh 支持插件机制，配置插件可以大大简化相关繁琐重复的命令。例如默认开启的 git 插件，就可以使用以下图表中的简写命令了：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160925141534.jpg" alt="Oh-My-Zsh Git Aliases"></p>
<p>　　那如何配置其它的插件了？只需要在 Oh My Zsh 的配置文件 <code>~/.zshrc</code> 中找到 <code>plugins=(git)</code> 字段，配置插件的名称即可，多个插件使用空格隔开。</p>
<p>　　那支持哪些插件了？Oh My Zsh 安装目录下的 plugins 目录下就是支持的所有插件。例如：<code>ls ~/.oh-my-zsh/plugins</code> 就可以看到所有支持的插件名称了。</p>
<p>　　Oh My Zsh 支持插件的简写说明可以参看 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="external">oh-my-zsh Plugins wiki</a>。</p>
<h2 id="5-常用命令简介"><a href="#5-常用命令简介" class="headerlink" title="5. 常用命令简介"></a>5. 常用命令简介</h2><ul>
<li><code>l</code> 等价与 <code>ls -la</code>，查看当前目录下所有文件。</li>
<li>打开目录不需要再敲 <code>cd</code>，直接输入目录名即可。</li>
<li><code>TAB</code> 提示更加聪明。</li>
<li>聪明的历史记录，例如：敲下 <code>ls</code> 命令，按下键盘 <code>up</code> 按键，就会带出以 <code>ls</code> 开头的历史记录命令。</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…&lt;/p&gt;
&lt;blockquote class=&#39;blockquote-center&#39;&gt;&lt;a href=&quot;http://ohmyz.sh/&quot;&gt;Oh My ZSH!&lt;/a&gt;&lt;/blockquote&gt;

&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/OMZLogo_BnW.png&quot; alt=&quot;Oh My Zsh&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-Oh-My-Zsh-简介&quot;&gt;&lt;a href=&quot;#1-Oh-My-Zsh-简介&quot; class=&quot;headerlink&quot; title=&quot;1. Oh My Zsh 简介&quot;&gt;&lt;/a&gt;1. Oh My Zsh 简介&lt;/h2&gt;&lt;p&gt;　　无意中看见了 Linux 的一款 Shell，相比于 Bash 极其美艳，决定入坑试水一下，不试不知道，一试绝对有惊喜，不仅外观美艳而且功能强大，那还有不替换 Bash 的理由吗？搞起搞起……&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="Zsh" scheme="http://ehlxr.me/tags/Zsh/"/>
    
      <category term="Shell" scheme="http://ehlxr.me/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>5 分钟搭建 Git 服务器-Gogs</title>
    <link href="http://ehlxr.me/2016/09/06/5-%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA-Git-%E6%9C%8D%E5%8A%A1%E5%99%A8-Gogs/"/>
    <id>http://ehlxr.me/2016/09/06/5-分钟搭建-Git-服务器-Gogs/</id>
    <published>2016-09-06T04:15:14.000Z</published>
    <updated>2016-09-06T09:21:00.587Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Gogs 基于 Go 语言的自助 Git 服务。它具有易安装、跨平台、轻量级、开源化等特性…</p>
</blockquote>
<p><img src="http://oapjp6spr.bkt.clouddn.com/gogs-logo.png" alt=""></p>
<p>　　最近新到一家公司，发现在使用 Gogs 搭建 Git 服务，遂研究了一下，和前段时间研究的 GitLab 做了一个简单的对比，虽然 Gogs 相对与 GitLab 还比较年轻，也许没有 GitLab 强大和稳健，但 Gogs 更加简单易用，而且能够满足正常的工作使用。</p>
<p>　　Gogs 是轻量级的 Git 服务，正如官方介绍的：一个廉价的树莓派的配置足以满足 Gogs 的最低系统硬件要求。最大程度上节省您的服务器资源！关键的一点是免费开源的，所有的代码都开源在 GitHub 上。下面结合官方的介绍，总结一下在 Linux 系统下的安装方法，真的是相当的简单，5 分钟足矣！</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><p>下载对应系统版本的二进制安装包，并上传至 Linux 系统，或通过以下命令下载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/gogits/gogs/releases/download/v0.9.97/linux_amd64.tar.gz</div></pre></td></tr></table></figure>
<p><em><a href="https://github.com/gogits/gogs/releases" target="_blank" rel="external">Gogs发布版本</a></em></p>
</li>
<li><p>解压安装包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar -xzvf gogs_v0.9.97_linux_amd64.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>进入到刚刚解压后的目录执行命令 <code>./gogs web</code>，出现以下信息：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160906134643.jpg" alt=""></p>
</li>
<li><p>打开浏览器输入：<code>http://ip:3000</code>，第一次会出现以下配置界面，根据实际情况选择即可</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/Gogs-install.png" alt=""></p>
</li>
<li><p>之后进入以下界面，安装完成。</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160906135253.jpg" alt=""></p>
</li>
<li><p>后台运行可参考以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nohup ./gogs web &gt; nohup.out 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><p>　　引用自官方<a href="https://gogs.io/docs/upgrade/upgrade_from_binary" target="_blank" rel="external">二级制升级文档</a></p>
<ol>
<li><p>首先，确认当前安装的位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 默认位置在 git 用户下的家目录</div><div class="line">$ sudo su - git</div><div class="line">$ cd ~</div><div class="line">$ pwd</div><div class="line">/home/git</div><div class="line">$ ls</div><div class="line">gogs gogs-repositories</div></pre></td></tr></table></figure>
</li>
<li><p>然后将当前目录移动到另一个临时的位置，但不是删除！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mv gogs gogs_old</div></pre></td></tr></table></figure>
</li>
<li><p>下载并解压新的二进制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 请根据系统和类型获取相应的二进制版本</div><div class="line">$ wget https://dl.gogs.io/gogs_v$VERSION_$OS_$ARCH.tar.gz</div><div class="line">$ tar -zxvf gogs_v$VERSION_$OS_$ARCH.tar.gz</div><div class="line">$ ls</div><div class="line">gogs gogs_old  gogs-repositories gogs_v$VERSION_$OS_$ARCH.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>复制 <code>custom</code>、<code>data</code> 和 <code>log</code> 目录到新解压的目录中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cp -R gogs_old/custom gogs</div><div class="line">$ cp -R gogs_old/data gogs</div><div class="line">$ cp -R gogs_old/log gogs</div></pre></td></tr></table></figure>
</li>
<li><p>最后，运行并打开浏览器进行测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd gogs</div><div class="line">$ ./gogs web</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Gogs 基于 Go 语言的自助 Git 服务。它具有易安装、跨平台、轻量级、开源化等特性…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/gogs-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　最近新到一家公司，发现在使用 Gogs 搭建 Git 服务，遂研究了一下，和前段时间研究的 GitLab 做了一个简单的对比，虽然 Gogs 相对与 GitLab 还比较年轻，也许没有 GitLab 强大和稳健，但 Gogs 更加简单易用，而且能够满足正常的工作使用。&lt;/p&gt;
&lt;p&gt;　　Gogs 是轻量级的 Git 服务，正如官方介绍的：一个廉价的树莓派的配置足以满足 Gogs 的最低系统硬件要求。最大程度上节省您的服务器资源！关键的一点是免费开源的，所有的代码都开源在 GitHub 上。下面结合官方的介绍，总结一下在 Linux 系统下的安装方法，真的是相当的简单，5 分钟足矣！&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://ehlxr.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
      <category term="Gogs" scheme="http://ehlxr.me/tags/Gogs/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 中配置 Git 命令自动补全</title>
    <link href="http://ehlxr.me/2016/09/04/CentOS-%E4%B8%AD%E9%85%8D%E7%BD%AE-Git-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
    <id>http://ehlxr.me/2016/09/04/CentOS-中配置-Git-命令自动补全/</id>
    <published>2016-09-04T02:03:35.000Z</published>
    <updated>2016-09-04T02:03:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-保存以下文件内容为：git-completion-bash"><a href="#1-保存以下文件内容为：git-completion-bash" class="headerlink" title="1. 保存以下文件内容为：git-completion.bash"></a>1. 保存以下文件内容为：<code>git-completion.bash</code></h3><p>　　<a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash" target="_blank" rel="external">https://github.com/git/git/blob/master/contrib/completion/git-completion.bash</a></p>
<h3 id="2-将上述文件git-completion-bash-copy-至个人home目录"><a href="#2-将上述文件git-completion-bash-copy-至个人home目录" class="headerlink" title="2. 将上述文件git-completion.bash copy 至个人home目录"></a>2. 将上述文件<code>git-completion.bash</code> copy 至个人<code>home</code>目录</h3><p>　　可设为隐藏文件以免后续被误删</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp git-completion.bash ~/.git-completion.bash</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3-编辑环境变量文件"><a href="#3-编辑环境变量文件" class="headerlink" title="3. 编辑环境变量文件"></a>3. 编辑环境变量文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.bashrc</div></pre></td></tr></table></figure>
<p>　　在最后加入下面内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.git-completion.bash</div></pre></td></tr></table></figure>
<p>完成以上步骤后，重启<code>shell</code>，就可以通过<code>tab</code>键自动补全<code>Git</code>命令.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-保存以下文件内容为：git-completion-bash&quot;&gt;&lt;a href=&quot;#1-保存以下文件内容为：git-completion-bash&quot; class=&quot;headerlink&quot; title=&quot;1. 保存以下文件内容为：git-completion.bash&quot;&gt;&lt;/a&gt;1. 保存以下文件内容为：&lt;code&gt;git-completion.bash&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;　　&lt;a href=&quot;https://github.com/git/git/blob/master/contrib/completion/git-completion.bash&quot;&gt;https://github.com/git/git/blob/master/contrib/completion/git-completion.bash&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-将上述文件git-completion-bash-copy-至个人home目录&quot;&gt;&lt;a href=&quot;#2-将上述文件git-completion-bash-copy-至个人home目录&quot; class=&quot;headerlink&quot; title=&quot;2. 将上述文件git-completion.bash copy 至个人home目录&quot;&gt;&lt;/a&gt;2. 将上述文件&lt;code&gt;git-completion.bash&lt;/code&gt; copy 至个人&lt;code&gt;home&lt;/code&gt;目录&lt;/h3&gt;&lt;p&gt;　　可设为隐藏文件以免后续被误删&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cp git-completion.bash ~/.git-completion.bash&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="http://ehlxr.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Naruto-Pictures</title>
    <link href="http://ehlxr.me/2016/09/02/Naruto-Pictures/"/>
    <id>http://ehlxr.me/2016/09/02/Naruto-Pictures/</id>
    <published>2016-09-02T06:36:04.000Z</published>
    <updated>2016-09-25T08:51:30.932Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/18210.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/196232.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/224147.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/199301.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/213318.jpg" alt=""></div></div></div></div>
<!-- <audio autoplay="autoplay" loop="loop">
    <source src="http://oapjp6spr.bkt.clouddn.com/%E9%AB%98%E6%A2%A8%E5%BA%B7%E6%B2%BB%20-%20%E5%AD%A4%E7%8B%AC.mp3" />
    Your browser does not support the audio element.
</audio> -->
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=0 height=0 src="http://music.163.com/outchain/player?type=0&id=83568232&auto=1&height=90"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
      <category term="图片" scheme="http://ehlxr.me/categories/%E5%9B%BE%E7%89%87/"/>
    
    
      <category term="picture" scheme="http://ehlxr.me/tags/picture/"/>
    
      <category term="naruto" scheme="http://ehlxr.me/tags/naruto/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo基于GitHub Pages搭建个人博客（三）</title>
    <link href="http://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://ehlxr.me/2016/08/30/使用Hexo基于GitHub-Pages搭建个人博客（三）/</id>
    <published>2016-08-30T06:23:52.000Z</published>
    <updated>2016-09-07T10:33:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>生命不息，折腾不休。从搭建 blog 以来，博文虽没有写几篇，但折腾的时间花了不少，走过了不少弯路，也踩过了不少的坑，虽然很懒，但本着好记性不如烂笔头的宗旨，打算在折腾记忆尚未磨灭之际记录一下走过的路和踩过的坑…</p>
</blockquote>
<p>接着前两篇使用 Hexo 基于 GitHub Pages 搭建个人博客之上，本文记录了在使用非常漂亮简洁的 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a> 主题过程中的各种折腾，其它主题的相关设置大同小异。再次衷心的感谢 Hexo 的作者和 Next 主题作者的无私奉献。</p>
<h1 id="一、主题基本配置"><a href="#一、主题基本配置" class="headerlink" title="一、主题基本配置"></a>一、主题基本配置</h1><p>　　记录一下 Next 主题的基本配置、设置「阅读全文」、关闭新建页面的评论功能、页面文章的篇数、宽度调节、设置「JavaScript 第三方库」等内容、在线字体替换（选择关闭，加快访问速度）</p>
<a id="more"></a>
<ol>
<li><p>主题安装</p>
<p><code>Next</code> 主题安装与所有 <code>Hexo</code> 主题安装一样。当克隆或者下载（<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next主题GitHub地址</a>）完成主题文件后，拷贝至站点目录的 <code>themes</code> 目录下，一般命名为 <code>next</code>，打开<code>站点配置文件</code>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code> 即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
</li>
<li><p>Next 主题宽度调节</p>
<p>编辑 <code>themes/next/source/css/_variables/custom.styl</code> 文件，新增变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 修改成你期望的宽度</div><div class="line">$content-desktop = 700px</div><div class="line"></div><div class="line">// 当视窗超过 1600px 后的宽度</div><div class="line">$content-desktop-large = 900px</div></pre></td></tr></table></figure>
<p>以上方法不适用 <code>Pisces</code> Scheme</p>
<p> <code>Pisces</code> Scheme 编辑 <code>themes/next/source/css/_schemes/Picses/_layout.styl</code> 文件，更改以下 <code>css</code> 选项定义值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.header&#123; width: 1150px; &#125;</div><div class="line">.container .main-inner &#123; width: 1150px; &#125;</div><div class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="二、多说评论"><a href="#二、多说评论" class="headerlink" title="二、多说评论"></a>二、多说评论</h1><ol>
<li><p>登录<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>后在首页选择 “我要安装”。</p>
</li>
<li><p>创建站点，填写表单。<code>多说域名</code> 这一栏填写的即是你的 <code>duoshuo_shortname</code>，如图：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/duoshuo-create-site.png" alt="enter description here"></p>
</li>
<li><p>创建站点完成后在 <code>主题配置文件</code> 中新增 <code>duoshuo_shortname</code> 字段，值设置成上一步中的值。</p>
</li>
<li><p>开启多说热评文章，在 <code>主题配置文件</code> 中设置 <code>duoshuo_hotartical</code> 的值为 <code>true</code> 即可</p>
</li>
<li><p>多说评论样式调整，登录<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>后在首页右上角点击“后台管理”，选择站点名称打开多说后台管理页面，选择“设置”下拉找到“自定义CSS”输入框，填写以下<code>CSS</code>样式，效果参考本站文章结尾评论样式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">/*-------------访客底部----------------*/</div><div class="line">.ds-recent-visitors &#123;</div><div class="line">    margin-bottom: 200px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media (max-width: 768px) &#123;</div><div class="line">    .ds-recent-visitors &#123;</div><div class="line">        margin-bottom: 440px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/*-------------非圆角----------------*/</div><div class="line">#ds-reset .ds-rounded &#123;</div><div class="line">    border-radius: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.theme-next #ds-thread #ds-reset .ds-textarea-wrapper &#123;</div><div class="line">    border-top-right-radius: 0px;</div><div class="line">    border-top-left-radius: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.theme-next #ds-thread #ds-reset .ds-post-button &#123;</div><div class="line">    border-radius: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.ds-post-self xmp &#123;</div><div class="line">    word-wrap: break-word;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*-------------访客----------------*/</div><div class="line">#ds-reset .ds-avatar img,</div><div class="line">#ds-recent-visitors .ds-avatar img &#123;</div><div class="line">    width: 54px;</div><div class="line">    height: 54px; /*设置图像的长和宽，这里要根据自己的评论框情况更改*/</div><div class="line">    border-radius: 27px; /*设置图像圆角效果,在这里我直接设置了超过width/2的像素，即为圆形了*/</div><div class="line">    -webkit-border-radius: 27px; /*圆角效果：兼容webkit浏览器*/</div><div class="line">    -moz-border-radius: 27px;</div><div class="line">    box-shadow: inset 0 -1px 0 #3333sf; /*设置图像阴影效果*/</div><div class="line">    -webkit-box-shadow: inset 0 -1px 0 #3333sf;</div><div class="line">    -webkit-transition: 0.4s;</div><div class="line">    -webkit-transition: -webkit-transform 0.4s ease-out;</div><div class="line">    transition: transform 0.4s ease-out; /*变化时间设置为0.4秒(变化动作即为下面的图像旋转360读）*/</div><div class="line">    -moz-transition: -moz-transform 0.4s ease-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*-------------访客悬浮在头像----------------*/</div><div class="line">#ds-reset .ds-avatar img:hover,</div><div class="line">#ds-recent-visitors .ds-avatar img:hover &#123;</div><div class="line">    box-shadow: 0 0 10px #fff;</div><div class="line">rgba(255, 255, 255, .6), inset 0 0 20 px rgba(255, 255, 255, 1);</div><div class="line">    -webkit-box-shadow: 0 0 10px #fff;</div><div class="line">rgba(255, 255, 255, .6), inset 0 0 20 px rgba(255, 255, 255, 1);</div><div class="line">    transform: rotateZ(360deg); /*图像旋转360度*/</div><div class="line">    -webkit-transform: rotateZ(360deg);</div><div class="line">    -moz-transform: rotateZ(360deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#ds-thread #ds-reset .ds-textarea-wrapper textarea &#123;</div><div class="line">    background: url(http://ww4.sinaimg.cn/small/649a4735gw1et7gnhy5fej20zk0m8q3q.jpg) right no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#ds-recent-visitors .ds-avatar &#123;</div><div class="line">    float: left</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*-------------隐藏版权----------------*/</div><div class="line">#ds-thread #ds-reset .ds-powered-by &#123;</div><div class="line">    display: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="三、统计"><a href="#三、统计" class="headerlink" title="三、统计"></a>三、统计</h1><p>　　我使用 <code>LeanCloud</code> 统计文章阅读数，使用不蒜子统计站点的 PV 和 UV 数。</p>
<ol>
<li><p>文章阅读次数统计（LeanCloud)</p>
<p>参考<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="external">为NexT主题添加文章阅读量统计功能</a></p>
</li>
<li><p>不蒜子统计站点访问统计</p>
<p>编辑 <code>主题配置文件</code> 中的 <code>busuanzi_count</code> 的配置项，配置以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># count values only if the other configs are false</div><div class="line">enable: true</div><div class="line"></div><div class="line"># custom uv span for the whole site</div><div class="line">site_uv: true</div><div class="line">site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</div><div class="line">site_uv_footer:</div><div class="line"></div><div class="line"># custom pv span for the whole site</div><div class="line">site_pv: true</div><div class="line">site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</div><div class="line">site_pv_footer:</div><div class="line"></div><div class="line"># custom pv span for one page only</div><div class="line">page_pv: false</div><div class="line">page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</div><div class="line">page_pv_footer:</div></pre></td></tr></table></figure>
<p><code>site/page_pv/uv_header</code> 和 <code>site/page_pv/uv_footer</code> 为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）font-awesome。</p>
</li>
</ol>
<h1 id="四、设置-RSS"><a href="#四、设置-RSS" class="headerlink" title="四、设置 RSS"></a>四、设置 RSS</h1><ol>
<li><p>安装 <code>hexo-generator-feed</code>，在站点的根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>站点配置文件</code>，新增以下内容到任意位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># RSS订阅支持</div><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line"></div><div class="line"># Feed Atom</div><div class="line">feed:</div><div class="line">type: atom</div><div class="line">path: atom.xml</div><div class="line">limit: 20</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="五、内容分享"><a href="#五、内容分享" class="headerlink" title="五、内容分享"></a>五、内容分享</h1><p>　　使用 JiaThis 作为内容分享服务，具体步骤如下：<br>　　<br>　　编辑 <code>站点配置文件</code>， 添加字段 <code>jiathis</code>，值为 <code>true</code> 即可。</p>
<h1 id="六、搜索服务"><a href="#六、搜索服务" class="headerlink" title="六、搜索服务"></a>六、搜索服务</h1><ol>
<li><p>安装 <code>hexo-generator-search</code>，在站点的根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>站点配置文件</code>，新增以下内容到任意位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="七、背景效果"><a href="#七、背景效果" class="headerlink" title="七、背景效果"></a>七、背景效果</h1><p>　　介绍博客背景动态效果图和点击小红心效果的相关设置。</p>
<ol>
<li><p>把 js 文件 <a href="https://github.com/ehlxr/ehlxr.github.io/blob/master/js/src/love.js" target="_blank" rel="external">love.js</a> 和 <a href="https://github.com/ehlxr/ehlxr.github.io/blob/master/js/src/particle.js" target="_blank" rel="external">particle.js</a> 放在<code>\themes\next\source\js\src</code>文件目录下</p>
</li>
<li><p>更新<code>\themes\next\layout\_layout.swig</code>文件，在<code>末尾</code>（在前面引用会出现找不到的bug）添加以下 js 引入代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 背景动画 --&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/particle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;!-- 页面点击小红心 --&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="八、图片模式"><a href="#八、图片模式" class="headerlink" title="八、图片模式"></a>八、图片模式</h1><ol>
<li><p>新建博文，设置<code>type: &quot;picture&quot;</code>，使用<code>{\% gp x-x \%} ... {\% endgp \%}</code>标签引用要展示的图片地址，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Naruto-Pictures</div><div class="line">categories: [图片]</div><div class="line">tags: [picture,naruto]</div><div class="line">date: 2016-09-02 14:36:04</div><div class="line">keywords: picture,naruto</div><div class="line">type: &quot;picture&quot;</div><div class="line">top: 999</div><div class="line">---</div><div class="line">&#123;% gp 5-3 %&#125;</div><div class="line">![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)</div><div class="line">![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)</div><div class="line">![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)</div><div class="line">![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)</div><div class="line">![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)</div><div class="line">&#123;% endgp %&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>{\% gp 5-3 \%}</code>：设置图片展示效果，参考<code>theme/next/scripts/tags/group-pictures.js</code>注释效果</p>
</li>
</ol>
<h1 id="九、博文压缩"><a href="#九、博文压缩" class="headerlink" title="九、博文压缩"></a>九、博文压缩</h1><p>　　目前知道的有两个插件可以压缩博文，<code>hexo-all-minifier</code>插件和<code>gulp</code>插件。<code>hexo-all-minifier</code>插件虽然使用比较简单，而且可以压缩图片，但是发现对文章缩进（输入法全拼模式下按<code>Tab</code>）不支持，所以暂时使用第二种压缩手段。</p>
<ol>
<li><p><code>hexo-all-minifier</code>配置使用</p>
<p>安装 <code>hexo-all-minifier</code>，在站点的根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-all-minifier --save</div></pre></td></tr></table></figure>
<p><code>hexo g</code>生产博文的时候就会自动压缩 HTML、JS、图片，详情参考<a href="https://github.com/unhealthy/hexo-all-minifier" target="_blank" rel="external">插件介绍</a></p>
</li>
<li><p><code>gulp</code>插件配置使用</p>
<p><code>hexo</code>依赖<code>gulp</code>插件安装，在站点的根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp -g</div><div class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</div></pre></td></tr></table></figure>
<p>在<code>package.json</code>同级目录下，新建<code>gulpfile.js</code>并填入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</div><div class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</div><div class="line"></div><div class="line">// 压缩 public 目录 css</div><div class="line">gulp.task(&apos;minify-css&apos;, function() &#123;</div><div class="line">    return gulp.src(&apos;./public/**/*.css&apos;)</div><div class="line">        .pipe(minifycss())</div><div class="line">        .pipe(gulp.dest(&apos;./public&apos;));</div><div class="line">&#125;);</div><div class="line">// 压缩 public 目录 html</div><div class="line">gulp.task(&apos;minify-html&apos;, function() &#123;</div><div class="line">  return gulp.src(&apos;./public/**/*.html&apos;)</div><div class="line">    .pipe(htmlclean())</div><div class="line">    .pipe(htmlmin(&#123;</div><div class="line">         removeComments: true,</div><div class="line">         minifyJS: true,</div><div class="line">         minifyCSS: true,</div><div class="line">         minifyURLs: true,</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(&apos;./public&apos;))</div><div class="line">&#125;);</div><div class="line">// 压缩 public/js 目录 js</div><div class="line">gulp.task(&apos;minify-js&apos;, function() &#123;</div><div class="line">    return gulp.src(&apos;./public/**/*.js&apos;)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(&apos;./public&apos;));</div><div class="line">&#125;);</div><div class="line">// 执行 gulp 命令时执行的任务</div><div class="line">gulp.task(&apos;default&apos;, [</div><div class="line">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;</div><div class="line">]);</div></pre></td></tr></table></figure>
<p>生成博文是执行<code>hexo g &amp;&amp; gulp</code>就会根据<code>gulpfile.js</code>中的配置，对<code>public</code>目录中的静态资源文件进行压缩。</p>
</li>
</ol>
<h1 id="十、博文置顶"><a href="#十、博文置顶" class="headerlink" title="十、博文置顶"></a>十、博文置顶</h1><ol>
<li><p>修改<code>hexo-generator-index</code>插件</p>
<p>替换文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 为：<a href="https://github.com/ehlxr/useful-code/blob/master/resources/generator.js" target="_blank" rel="external">generator.js</a></p>
</li>
<li><p>在文章中添加<code>top</code>值，数值越大文章越靠前，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Naruto 图集</div><div class="line">categories: [图片]</div><div class="line">tags: [picture,naruto]</div><div class="line">date: 2016-09-02 14:36:04</div><div class="line">keywords: picture,naruto</div><div class="line">type: &quot;picture&quot;</div><div class="line">top: 10</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="十一、头像圆形旋转"><a href="#十一、头像圆形旋转" class="headerlink" title="十一、头像圆形旋转"></a>十一、头像圆形旋转</h1><p>　　介绍一下实现头像圆形，鼠标经过旋转或者一直让旋转效果，主要是修改 Hexo 目录下 <code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code> 文件。</p>
<ol>
<li><p>头像圆形：修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.site-author-image &#123;</div><div class="line">  display: block;</div><div class="line">  margin: 0 auto;</div><div class="line">  padding: $site-author-image-padding;</div><div class="line">  max-width: $site-author-image-width;</div><div class="line">  height: $site-author-image-height;</div><div class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line">  </div><div class="line">  /*头像圆形*/</div><div class="line">  border-radius: 80px;</div><div class="line">  -webkit-border-radius: 80px;</div><div class="line">  -moz-border-radius: 80px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>鼠标经过旋转：修改 <code>sidebar-author.styl</code> 文件，添加 CSS 样式 <code>img:hover</code> 如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">img:hover &#123;</div><div class="line">  /* 鼠标经过头像旋转360度 */</div><div class="line">  -webkit-transform: rotateZ(360deg);</div><div class="line">  -moz-transform: rotateZ(360deg);</div><div class="line">  transform: rotateZ(360deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">.site-author-image &#123;</div><div class="line">  display: block;</div><div class="line">  margin: 0 auto;</div><div class="line">  padding: $site-author-image-padding;</div><div class="line">  max-width: $site-author-image-width;</div><div class="line">  height: $site-author-image-height;</div><div class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line"></div><div class="line">  /* 头像圆形 */</div><div class="line">  border-radius: 80px;</div><div class="line">  -webkit-border-radius: 80px;</div><div class="line">  -moz-border-radius: 80px;</div><div class="line">  box-shadow: inset 0 -1px 0 #333sf;</div><div class="line">  </div><div class="line">  /* 鼠标经过头像旋转360度 */</div><div class="line">  -webkit-transition: -webkit-transform 1.5s ease-out;</div><div class="line">  -moz-transition: -moz-transform 1.5s ease-out;</div><div class="line">  transition: transform 1.5s ease-out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>一直旋转效果：修改 <code>sidebar-author.styl</code> 文件，添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/* Z 轴旋转动画 */</div><div class="line">@-webkit-keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    -webkit-transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    -webkit-transform: rotateZ(360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@-moz-keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    -moz-transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    -moz-transform: rotateZ(360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    transform: rotateZ(360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">.site-author-image &#123;</div><div class="line">  display: block;</div><div class="line">  margin: 0 auto;</div><div class="line">  padding: $site-author-image-padding;</div><div class="line">  max-width: $site-author-image-width;</div><div class="line">  height: $site-author-image-height;</div><div class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line"></div><div class="line">  /* 头像圆形 */</div><div class="line">  border-radius: 80px;</div><div class="line">  -webkit-border-radius: 80px;</div><div class="line">  -moz-border-radius: 80px;</div><div class="line">  box-shadow: inset 0 -1px 0 #333sf;</div><div class="line">  </div><div class="line">  /* 设置循环动画：animation:动画名称 动画播放时长单位秒或微秒 </div><div class="line">    动画播放的速度曲线linear为匀速 动画播放次数infinite为循环播放; */</div><div class="line">  -webkit-animation: play 3s linear infinite;</div><div class="line">  -moz-animation: play 3s linear infinite;</div><div class="line">  animation: play 3s linear infinite; </div><div class="line"></div><div class="line">  /* 鼠标经过头像旋转360度 </div><div class="line">  -webkit-transition: -webkit-transform 1.5s ease-out;</div><div class="line">  -moz-transition: -moz-transform 1.5s ease-out;</div><div class="line">  transition: transform 1.5s ease-out;*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>鼠标经过停止头像旋转：修改 <code>sidebar-author.styl</code> 文件，添加 CSS 样式 <code>img:hover</code> 如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">img:hover &#123;</div><div class="line">  /* 鼠标经过停止头像旋转 */</div><div class="line">  -webkit-animation-play-state:paused;</div><div class="line">  animation-play-state:paused;</div><div class="line"></div><div class="line">  /* 鼠标经过头像旋转360度 </div><div class="line">  -webkit-transform: rotateZ(360deg);</div><div class="line">  -moz-transform: rotateZ(360deg);</div><div class="line">  transform: rotateZ(360deg);*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整 sidebar-author.styl 文件<a href="https://github.com/ehlxr/ehlxr-Hexo/blob/master/themes/next/source/css/_common/components/sidebar/sidebar-author.styl" target="_blank" rel="external">参考地址</a>。</p>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;生命不息，折腾不休。从搭建 blog 以来，博文虽没有写几篇，但折腾的时间花了不少，走过了不少弯路，也踩过了不少的坑，虽然很懒，但本着好记性不如烂笔头的宗旨，打算在折腾记忆尚未磨灭之际记录一下走过的路和踩过的坑…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着前两篇使用 Hexo 基于 GitHub Pages 搭建个人博客之上，本文记录了在使用非常漂亮简洁的 &lt;a href=&quot;http://theme-next.iissnan.com/&quot;&gt;Next&lt;/a&gt; 主题过程中的各种折腾，其它主题的相关设置大同小异。再次衷心的感谢 Hexo 的作者和 Next 主题作者的无私奉献。&lt;/p&gt;
&lt;h1 id=&quot;一、主题基本配置&quot;&gt;&lt;a href=&quot;#一、主题基本配置&quot; class=&quot;headerlink&quot; title=&quot;一、主题基本配置&quot;&gt;&lt;/a&gt;一、主题基本配置&lt;/h1&gt;&lt;p&gt;　　记录一下 Next 主题的基本配置、设置「阅读全文」、关闭新建页面的评论功能、页面文章的篇数、宽度调节、设置「JavaScript 第三方库」等内容、在线字体替换（选择关闭，加快访问速度）&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://ehlxr.me/categories/Hexo/"/>
    
    
      <category term="GitHub" scheme="http://ehlxr.me/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://ehlxr.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>[转]Java程序员情书</title>
    <link href="http://ehlxr.me/2016/08/22/%E8%BD%AC-Java%E7%A8%8B%E5%BA%8F%E5%91%98%E6%83%85%E4%B9%A6/"/>
    <id>http://ehlxr.me/2016/08/22/转-Java程序员情书/</id>
    <published>2016-08-22T06:24:15.000Z</published>
    <updated>2016-08-22T06:37:55.244Z</updated>
    
    <content type="html"><![CDATA[<p>我能抽象出整个世界．．． </p>
<p>但是我却不能抽象出你．．． </p>
<p>你肯定是一个单例，因为你是那样的独一无二… </p>
<p>所以我的世界并不完整．．． </p>
<p>我可以重载甚至覆盖这个世界里的任何一种方法．．． </p>
<p>但是却不能覆盖对你的思念．．． </p>
<p>也许命中注定了 你与我存在于不同的包里… </p>
<p>在你的世界里，你被烙上了私有的属性… </p>
<a id="more"></a>
<p>我用尽全身力气，也找不到访问你的接口… </p>
<p>我不愿就此甘心，找到了藏身在神殿的巫师，教会了我穿越时空的方法… </p>
<p>终于，我用反射这把利剑，打开了你空间的缺口… </p>
<p>并发现了接近你的秘密… </p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/222wqklkmlqej5-lp.jpg" alt="enter description here"></p>
<p>当我迫不及待地调用了爱你这个方法．．． </p>
<p>并义无返顾的把自己作为参数传进这个方法时．．． </p>
<p>我才发现爱上你是一个没有终止条件的递归．．． </p>
<p>它不停的返回我对你的思念并压入我心里的堆栈．．． </p>
<p>在这无尽的黑夜中 ，终于体验到你对我爱的回调… </p>
<p>我的内存里已经再也装不下别人… </p>
<p>当我以为将与你在这个死循环中天荒地老时… </p>
<p>万恶的系统抛出了爱的异常… </p>
<p>此刻我才发现，我不过是操纵于虚拟机下的一个线程，你也是… </p>
<p>但我毫不后悔，因为在爱的洗礼之后… </p>
<p>我看见了一个新的生命，那是我们的, 继承</p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="110" src="http://music.163.com/outchain/player?type=0&id=448161195&auto=1&height=90"></iframe>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我能抽象出整个世界．．． &lt;/p&gt;
&lt;p&gt;但是我却不能抽象出你．．． &lt;/p&gt;
&lt;p&gt;你肯定是一个单例，因为你是那样的独一无二… &lt;/p&gt;
&lt;p&gt;所以我的世界并不完整．．． &lt;/p&gt;
&lt;p&gt;我可以重载甚至覆盖这个世界里的任何一种方法．．． &lt;/p&gt;
&lt;p&gt;但是却不能覆盖对你的思念．．． &lt;/p&gt;
&lt;p&gt;也许命中注定了 你与我存在于不同的包里… &lt;/p&gt;
&lt;p&gt;在你的世界里，你被烙上了私有的属性… &lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 系统下 GitLab 搭建与基本配置</title>
    <link href="http://ehlxr.me/2016/07/31/CentOS-%E7%B3%BB%E7%BB%9F%E4%B8%8B-GitLab-%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://ehlxr.me/2016/07/31/CentOS-系统下-GitLab-搭建与基本配置/</id>
    <published>2016-07-31T10:15:47.000Z</published>
    <updated>2016-09-06T04:17:35.071Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://about.gitlab.com/" target="_blank" rel="external">GitLab 是一个开源的版本管理系统，提供了类似于 GitHub 的源代码浏览，管理缺陷和注释等功能，你可以将代码免费托管到 GitLab.com，而且不限项目数量和成员数。最吸引人的一点是，可以在自己的服务器上搭建 GitLab CE （社区免费版）版本，方便内部团队协作开发和代码管理。</a></p>
</blockquote>
<p>下面介绍如何在 CentOS 服务器上搭建 GitLab CE 版本，以及一些基本的配置。</p>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>　GitLab 提供了两种安装方式：源码手动编译安装和软件包管理安装。</p>
<p>　源码手动编译安装虽然配置灵活，但过程比较麻烦，不容易安装成功，所以我这里选择软件包管理安装的形式。</p>
<ul>
<li><h4 id="使用-GitLab-提供仓库在线安装"><a href="#使用-GitLab-提供仓库在线安装" class="headerlink" title="使用 GitLab 提供仓库在线安装"></a>使用 GitLab 提供仓库在线安装</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</div><div class="line">yum install gitlab-ce</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>　　国外的 GitLab 仓库访问速度较慢，可以使用国内的站点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash</div><div class="line">yum install gitlab-ce</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="下载离线软件包安装"><a href="#下载离线软件包安装" class="headerlink" title="下载离线软件包安装"></a>下载离线软件包安装</h4><p>  如果网络速度不理想，可以使用离线软件包 rpm 的方式进行安装，下面提供了几个站点的下载地址。</p>
<ul>
<li><h5 id="GitLab-官方：https-packages-gitlab-com-gitlab-gitlab-ce-filter-rpms"><a href="#GitLab-官方：https-packages-gitlab-com-gitlab-gitlab-ce-filter-rpms" class="headerlink" title="GitLab 官方：https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms"></a>GitLab 官方：<a href="https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms" target="_blank" rel="external">https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms</a></h5></li>
<li><h5 id="清华大学TUNA开源镜像站：https-mirrors-tuna-tsinghua-edu-cn-gitlab-ce-yum-el7"><a href="#清华大学TUNA开源镜像站：https-mirrors-tuna-tsinghua-edu-cn-gitlab-ce-yum-el7" class="headerlink" title="清华大学TUNA开源镜像站：https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/"></a>清华大学TUNA开源镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a></h5></li>
<li><h5 id="浙大开源镜像站：http-mirrors-lifetoy-org-gitlab-ce-yum-el7"><a href="#浙大开源镜像站：http-mirrors-lifetoy-org-gitlab-ce-yum-el7" class="headerlink" title="浙大开源镜像站：http://mirrors.lifetoy.org/gitlab-ce/yum/el7/"></a>浙大开源镜像站：<a href="http://mirrors.lifetoy.org/gitlab-ce/yum/el7/" target="_blank" rel="external">http://mirrors.lifetoy.org/gitlab-ce/yum/el7/</a></h5></li>
</ul>
</li>
</ul>
<p>　　下载好 rpm 软件安装包后上传到服务器指定的目录下，通过以下命令进行安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh　gitlab-ce-8.9.6-ce.0.el7.x86_64.rpm</div></pre></td></tr></table></figure>
<p>　　记录一下 rpm 卸载软件安装包命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -e --nodeps gitlab-ce-8.9.6-ce.0.el7.x86_64</div></pre></td></tr></table></figure>
<h3 id="2-启动-GitLab"><a href="#2-启动-GitLab" class="headerlink" title="2. 启动 GitLab"></a>2. 启动 GitLab</h3><p>　安装完成之后，打开配置文件 <code>/etc/gitlab/gitlab.rb</code> 将 <code>external_url = &#39;http://git.example.com&#39;</code> 修改为自己的 IP 地址：<code>external_url &#39;http://ip_address&#39;</code> ，然后执行下面的命令，对 GitLab 进行编译：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<p>　完成后，使用浏览器访问：<a href="http://ip_address" target="_blank" rel="external">http://ip_address</a> 可进入 GitLab 登录页面，首次访问系统会让你重新设置管理员的密码，默认的管理员账号是 root，如果你想更改默认管理员账号，登录系统后可以修改帐号名。</p>
<h3 id="3-GitLab-基本配置"><a href="#3-GitLab-基本配置" class="headerlink" title="3. GitLab 基本配置"></a>3. GitLab 基本配置</h3><p>　GitLab 的相关参数配置都存在 <code>/etc/gitlab/gitlab.rb</code> 文件里。自 GitLab 7.6 开始的新安装包, 已经默认将所有的参数写入到 <code>/etc/gitlab/gitlab.rb</code> 配置文件中。</p>
<ul>
<li><h4 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h4></li>
</ul>
<p>　　GitLab 默认使用 80 端口对外提供服务，因为 80 端口被其他服务占用，所以需要更改。打开 <code>/etc/gitlab/gitlab.rb</code> 配置文件，修改 <code>external_url &#39;http://ip_address&#39;</code> 为 <code>external_url &#39;http://ip_address:new-port&#39;</code>， </p>
<p>　　重新编译配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<p>　　这时候就可以通更改后的 IP + 端口号码进行访问了。</p>
<ul>
<li><h4 id="邮箱配置"><a href="#邮箱配置" class="headerlink" title="邮箱配置"></a>邮箱配置</h4></li>
</ul>
<p>　　以下是 163 邮箱的配置参考，打开　<code>/etc/gitlab/gitlab.rb</code> 配置文件，添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gitlab_rails[&apos;smtp_enable&apos;] = true</div><div class="line">gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.163.com&quot;</div><div class="line">gitlab_rails[&apos;smtp_port&apos;] = 25</div><div class="line">gitlab_rails[&apos;smtp_user_name&apos;] = &quot;test@163.com&quot;</div><div class="line">gitlab_rails[&apos;smtp_password&apos;] = &quot;password&quot;</div><div class="line">gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</div><div class="line">gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</div><div class="line">gitlab_rails[&apos;gitlab_email_from&apos;] = &quot;test@163.com&quot;</div></pre></td></tr></table></figure>
<p>　　<strong>注意：</strong> <code>test@163.com</code> 和 <code>password</code> 更新为自己邮箱地址和密码；邮箱需要开启 SMTP 协议。</p>
<p>　　重新编译配置即可生效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<p>　　其它邮箱的配置可参考：<a href="https://doc.gitlab.cc/omnibus/settings/smtp.html" target="_blank" rel="external">https://doc.gitlab.cc/omnibus/settings/smtp.html</a></p>
<ul>
<li><h4 id="头像配置"><a href="#头像配置" class="headerlink" title="头像配置"></a>头像配置</h4></li>
</ul>
<p>　　GitLab 默认使用的是 Gravatar 头像服务，不过现在貌似 Gravatar 国内好像访问不了，导致 GitLab 默认头像破裂，无法显示，可以替换为多说 Gravatar 服务器。打开 <code>/etc/gitlab/gitlab.rb</code> 配置文件，增加下面这一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab_rails[&apos;gravatar_plain_url&apos;] = &apos;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&apos;</div></pre></td></tr></table></figure>
<p>　　再分别执行以下命令即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gitlab-ctl reconfigure </div><div class="line">gitlab-rake cache:clear RAILS_ENV=production</div></pre></td></tr></table></figure>
<p>　　也可以关闭 Gravatar 头像显示配置，登录 GitLab 管理员账户，进入设置界面（路径地址：<a href="http://ip:port/admin/application_settings" target="_blank" rel="external">http://ip:port/admin/application_settings</a> ），取消以下选项即可。</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160731201717.png" alt=""></p>
<ul>
<li><h4 id="用户注册配置"><a href="#用户注册配置" class="headerlink" title="用户注册配置"></a>用户注册配置</h4></li>
</ul>
<p>　　管理员设置界面（路径地址：<a href="http://ip:port/admin/application_settings" target="_blank" rel="external">http://ip:port/admin/application_settings</a> ）以下选项可以控制用户注册配置，包括是否允许登录、注册和注册邮箱验证等选项。</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160731202214.png" alt=""></p>
<ul>
<li><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4></li>
</ul>
<p>　　GitLab 服务启动、停止、状态查询、修改配置生效等命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab-ctl start/stop/status/reconfigure  # 服务启动、停止、状态查询、修改配置生效</div></pre></td></tr></table></figure>
<p>　　也可以查看帮助文档获取更多命令信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab-ctl --help</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://about.gitlab.com/&quot;&gt;GitLab 是一个开源的版本管理系统，提供了类似于 GitHub 的源代码浏览，管理缺陷和注释等功能，你可以将代码免费托管到 GitLab.com，而且不限项目数量和成员数。最吸引人的一点是，可以在自己的服务器上搭建 GitLab CE （社区免费版）版本，方便内部团队协作开发和代码管理。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面介绍如何在 CentOS 服务器上搭建 GitLab CE 版本，以及一些基本的配置。&lt;/p&gt;
&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1. 安装&quot;&gt;&lt;/a&gt;1. 安装&lt;/h3&gt;&lt;p&gt;　GitLab 提供了两种安装方式：源码手动编译安装和软件包管理安装。&lt;/p&gt;
&lt;p&gt;　源码手动编译安装虽然配置灵活，但过程比较麻烦，不容易安装成功，所以我这里选择软件包管理安装的形式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;使用-GitLab-提供仓库在线安装&quot;&gt;&lt;a href=&quot;#使用-GitLab-提供仓库在线安装&quot; class=&quot;headerlink&quot; title=&quot;使用 GitLab 提供仓库在线安装&quot;&gt;&lt;/a&gt;使用 GitLab 提供仓库在线安装&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install gitlab-ce&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="http://ehlxr.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="GitLab" scheme="http://ehlxr.me/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装最新的 Git</title>
    <link href="http://ehlxr.me/2016/07/30/CentOS-7-%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84-Git/"/>
    <id>http://ehlxr.me/2016/07/30/CentOS-7-安装最新的-Git/</id>
    <published>2016-07-30T14:12:43.000Z</published>
    <updated>2016-09-24T04:34:31.353Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>yum 源仓库里的 Git 版本更新不及时，最新版本的 Git 是 1.8.3.1，但是官方最新版本已经到了 2.9.2。想要安装最新版本的的 Git，只能下载源码进行安装。</p>
</blockquote>
<h3 id="1-查看-yum-源仓库的-Git-信息："><a href="#1-查看-yum-源仓库的-Git-信息：" class="headerlink" title="1. 查看 yum 源仓库的 Git 信息："></a>1. 查看 yum 源仓库的 Git 信息：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum info git</div></pre></td></tr></table></figure>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160730222608.png" alt=""></p>
<p>　　可以看出，截至目前，yum 源仓库中最新的 Git 版本才 1.8.3.1，而查看最<a href="https://github.com/git/git/releases" target="_blank" rel="external">新的 Git 发布版本</a>，已经 2.9.2 了。</p>
<a id="more"></a>
<h3 id="2-依赖库安装"><a href="#2-依赖库安装" class="headerlink" title="2. 依赖库安装"></a>2. 依赖库安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</div><div class="line"># yum install  gcc perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure>
<h3 id="3-卸载低版本的-Git"><a href="#3-卸载低版本的-Git" class="headerlink" title="3. 卸载低版本的 Git"></a>3. 卸载低版本的 Git</h3><p>　　通过命令：<code>git –-version</code> 查看系统带的版本，Git 版本是： <code>1.8.3.1</code>，所以先要卸载低版本的 Git，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum remove git</div></pre></td></tr></table></figure>
<h3 id="4-下载新版的-Git-源码包"><a href="#4-下载新版的-Git-源码包" class="headerlink" title="4. 下载新版的 Git 源码包"></a>4. 下载新版的 Git 源码包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># wget https://github.com/git/git/archive/v2.9.2.tar.gz</div></pre></td></tr></table></figure>
<p>　　也可以离线下载，然后传到 CentOS 系统中指定的目录下。</p>
<h3 id="5-解压到指定目录"><a href="#5-解压到指定目录" class="headerlink" title="5. 解压到指定目录"></a>5. 解压到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># tar -xzvf v2.9.2.tar.gz -C ~/app/</div></pre></td></tr></table></figure>
<h3 id="6-安装-Git"><a href="#6-安装-Git" class="headerlink" title="6. 安装 Git"></a>6. 安装 Git</h3><p>　　分别执行以下命令进行编译安装，编译过程可能比较漫长，请耐心等待完成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd git-2.9.2</div><div class="line"># make prefix=/usr/local/git all</div><div class="line"># make prefix=/usr/local/git install</div></pre></td></tr></table></figure>
<h3 id="7-添加到环境变量"><a href="#7-添加到环境变量" class="headerlink" title="7. 添加到环境变量"></a>7. 添加到环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc</div><div class="line"># source /etc/bashrc # 实时生效</div></pre></td></tr></table></figure>
<h4 id="8-查看版本号"><a href="#8-查看版本号" class="headerlink" title="8. 查看版本号"></a>8. 查看版本号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># git --version</div><div class="line">git version 2.9.2</div></pre></td></tr></table></figure>
<p>至此，CentOS 就安装上了最新版本的 Git。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;yum 源仓库里的 Git 版本更新不及时，最新版本的 Git 是 1.8.3.1，但是官方最新版本已经到了 2.9.2。想要安装最新版本的的 Git，只能下载源码进行安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-查看-yum-源仓库的-Git-信息：&quot;&gt;&lt;a href=&quot;#1-查看-yum-源仓库的-Git-信息：&quot; class=&quot;headerlink&quot; title=&quot;1. 查看 yum 源仓库的 Git 信息：&quot;&gt;&lt;/a&gt;1. 查看 yum 源仓库的 Git 信息：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum info git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20160730222608.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　可以看出，截至目前，yum 源仓库中最新的 Git 版本才 1.8.3.1，而查看最&lt;a href=&quot;https://github.com/git/git/releases&quot;&gt;新的 Git 发布版本&lt;/a&gt;，已经 2.9.2 了。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 Node.js</title>
    <link href="http://ehlxr.me/2016/07/30/CentOS-7-%E5%AE%89%E8%A3%85-Node-js/"/>
    <id>http://ehlxr.me/2016/07/30/CentOS-7-安装-Node-js/</id>
    <published>2016-07-30T08:19:03.000Z</published>
    <updated>2016-09-24T04:36:11.287Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.</a></p>
</blockquote>
<h3 id="1-下载源码安装文件"><a href="#1-下载源码安装文件" class="headerlink" title="1. 下载源码安装文件"></a>1. 下载源码安装文件</h3><ul>
<li><h4 id="方式一：在线安装"><a href="#方式一：在线安装" class="headerlink" title="方式一：在线安装"></a>方式一：在线安装</h4><p>  通过以下命令下载源文件：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/v4.4.7/node-v4.4.7.tar.gz</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h4 id="方法二：离线安装"><a href="#方法二：离线安装" class="headerlink" title="方法二：离线安装"></a>方法二：离线安装</h4><p>  如果网络不好，可以通过<a href="https://nodejs.org/en/download/" target="_blank" rel="external">官方网站</a>下载，然后上传到 CentOS 系统中，下载如图所示：</p>
</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160730163835.png" alt=""></p>
<p>　　我这儿官方网站是无法正常访问的，需要一些手段（大家懂得），所以在网盘备份一份，地址：<a href="http://pan.baidu.com/s/1bpIAUAz" target="_blank" rel="external">http://pan.baidu.com/s/1bpIAUAz</a></p>
<h3 id="2-编译安装"><a href="#2-编译安装" class="headerlink" title="2. 编译安装"></a>2. 编译安装</h3><ul>
<li><h4 id="解压文件到指定的目录"><a href="#解压文件到指定的目录" class="headerlink" title="解压文件到指定的目录"></a>解压文件到指定的目录</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf node-v4.4.7.tar.gz -C app/</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc gcc-c++</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="配置安装"><a href="#配置安装" class="headerlink" title="配置安装"></a>配置安装</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure</div></pre></td></tr></table></figure>
<p>　　./configure 是源代码安装的第一步，主要的作用是对即将安装的软件进行配置，检查当前的环境是否满足要安装软件的依赖关系，生成 makefile文件，以便你可以用 make 和 make install 来编译和安装程序。</p>
<ul>
<li><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><p>编译命令：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure>
<p>　　编译的过程会花很长一段时间，等编译完成再执行安装命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure>
<h3 id="3-检查安装"><a href="#3-检查安装" class="headerlink" title="3. 检查安装"></a>3. 检查安装</h3><p>　　运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node --version</div></pre></td></tr></table></figure>
<p>　　若输出对应的版本号，则安装成功。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-下载源码安装文件&quot;&gt;&lt;a href=&quot;#1-下载源码安装文件&quot; class=&quot;headerlink&quot; title=&quot;1. 下载源码安装文件&quot;&gt;&lt;/a&gt;1. 下载源码安装文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;方式一：在线安装&quot;&gt;&lt;a href=&quot;#方式一：在线安装&quot; class=&quot;headerlink&quot; title=&quot;方式一：在线安装&quot;&gt;&lt;/a&gt;方式一：在线安装&lt;/h4&gt;&lt;p&gt;  通过以下命令下载源文件：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget https://nodejs.org/dist/v4.4.7/node-v4.4.7.tar.gz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="Node.js" scheme="http://ehlxr.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>[转]将 Centos 的 yum 源更改为国内的阿里云源</title>
    <link href="http://ehlxr.me/2016/07/30/%E8%BD%AC-%E5%B0%86-Centos-%E7%9A%84-yum-%E6%BA%90%E6%9B%B4%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E7%9A%84%E9%98%BF%E9%87%8C%E4%BA%91%E6%BA%90/"/>
    <id>http://ehlxr.me/2016/07/30/转-将-Centos-的-yum-源更改为国内的阿里云源/</id>
    <published>2016-07-30T03:57:59.000Z</published>
    <updated>2016-09-24T04:36:26.961Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云Linux安装镜像源地址：<a href="http://mirrors.aliyun.com/" target="_blank" rel="external">http://mirrors.aliyun.com/</a></p>
<p>CentOS系统更换软件安装源</p>
<ul>
<li><h3 id="一-备份你的原镜像文件，以免出错后可以恢复。"><a href="#一-备份你的原镜像文件，以免出错后可以恢复。" class="headerlink" title="一. 备份你的原镜像文件，以免出错后可以恢复。"></a>一. 备份你的原镜像文件，以免出错后可以恢复。</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="二-下载新的-CentOS-Base-repo-到-etc-yum-repos-d"><a href="#二-下载新的-CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="二. 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/"></a>二. 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/</h3></li>
<li><h4 id="CentOS-5"><a href="#CentOS-5" class="headerlink" title="CentOS 5"></a>CentOS 5</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="三-运行-yum-makecache-生成缓存"><a href="#三-运行-yum-makecache-生成缓存" class="headerlink" title="三. 运行 yum makecache 生成缓存"></a>三. 运行 yum makecache 生成缓存</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum clean all</div><div class="line">yum makecache</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里云Linux安装镜像源地址：&lt;a href=&quot;http://mirrors.aliyun.com/&quot;&gt;http://mirrors.aliyun.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CentOS系统更换软件安装源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;一-备份你的原镜像文件，以免出错后可以恢复。&quot;&gt;&lt;a href=&quot;#一-备份你的原镜像文件，以免出错后可以恢复。&quot; class=&quot;headerlink&quot; title=&quot;一. 备份你的原镜像文件，以免出错后可以恢复。&quot;&gt;&lt;/a&gt;一. 备份你的原镜像文件，以免出错后可以恢复。&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 与 MySQL 知识总结</title>
    <link href="http://ehlxr.me/2016/07/28/Oracle-%E4%B8%8E-MySQL-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://ehlxr.me/2016/07/28/Oracle-与-MySQL-知识总结/</id>
    <published>2016-07-28T06:06:36.000Z</published>
    <updated>2016-08-04T10:40:47.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>对日常工作中使用 Oracle 和 MySQL 数据库知识对比总结。</p>
</blockquote>
<h2 id="1-SQLPlus-连接数据库的方式"><a href="#1-SQLPlus-连接数据库的方式" class="headerlink" title="1. SQLPlus 连接数据库的方式"></a>1. SQLPlus 连接数据库的方式</h2><ul>
<li><h3 id="cmd-中输入：sqlplus-用户名-密码-数据库实例"><a href="#cmd-中输入：sqlplus-用户名-密码-数据库实例" class="headerlink" title="cmd 中输入：sqlplus 用户名/密码@数据库实例"></a>cmd 中输入：sqlplus 用户名/密码@数据库实例</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sqlplus system/lxr316@oracle</div><div class="line">sqlplus sys/admin as sysdba</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="打开-SQLPlus-直接输入用户名和密码"><a href="#打开-SQLPlus-直接输入用户名和密码" class="headerlink" title="打开 SQLPlus 直接输入用户名和密码"></a>打开 SQLPlus 直接输入用户名和密码</h3></li>
<li><h3 id="使用命令："><a href="#使用命令：" class="headerlink" title="使用命令："></a>使用命令：</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">connect sys/admin as sysdba</div><div class="line">connect system/lxr316</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="超级管理员登录："><a href="#超级管理员登录：" class="headerlink" title="超级管理员登录："></a>超级管理员登录：</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sys as sysdba</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="断开数据库："><a href="#断开数据库：" class="headerlink" title="断开数据库："></a>断开数据库：</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disconnect; # 可简写 disconn</div></pre></td></tr></table></figure>
<h2 id="2-MySQL-连接"><a href="#2-MySQL-连接" class="headerlink" title="2. MySQL 连接"></a>2. MySQL 连接</h2><p>　<strong>命令：</strong> mysql [–h 服务器地址] –u 用户名 –p [密码]（<em>需要配置 mysql 数据库的 bin 到环境变量中</em>）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -h localhost –u root –p root</div><div class="line">mysql –u root -p</div></pre></td></tr></table></figure>
<h2 id="3-用户操作"><a href="#3-用户操作" class="headerlink" title="3. 用户操作"></a>3. 用户操作</h2><ul>
<li><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3></li>
<li><p>创建用户</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create user [username] identified by [password];</div></pre></td></tr></table></figure>
<ul>
<li>修改用户密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter user [username] identified by [password];</div></pre></td></tr></table></figure>
<ul>
<li>账户上锁、解锁</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter user [username] account lock|unlock;</div></pre></td></tr></table></figure>
<ul>
<li>用户首次登录时直接修改密码–密码失效</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter user [username] password expire;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3></li>
<li><p>创建用户:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</div></pre></td></tr></table></figure>
<p>　　<strong>备注：</strong><br>　　<strong>username</strong>：你将创建的用户名。<br>　　<strong>host</strong>：指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%。<br>　　<strong>password</strong>：该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器。</p>
<p>　　例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE USER &apos;dog&apos;@&apos;localhost&apos;IDENTIFIED BY &apos;123456&apos;;</div><div class="line">CREATE USER &apos;pig&apos;@&apos;192.168.1.101_&apos;IDENDIFIED BY &apos;123456&apos;;</div><div class="line">CREATE USER &apos;pig&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;;</div><div class="line">CREATE USER &apos;pig&apos;@&apos;%&apos; IDENTIFIED BY &apos;&apos;;</div><div class="line">CREATE USER &apos;pig&apos;@&apos;%&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>设置与更改用户密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET PASSWORD FOR &apos;username&apos;@&apos;host&apos; = PASSWORD(&apos;newpassword&apos;);</div></pre></td></tr></table></figure>
<p>　　如果是当前登陆用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET PASSWORD = PASSWORD(&quot;newpassword&quot;);</div></pre></td></tr></table></figure>
<ul>
<li>删除用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP USER &apos;username&apos;@&apos;host&apos;;</div></pre></td></tr></table></figure>
<h2 id="4-权限管理"><a href="#4-权限管理" class="headerlink" title="4. 权限管理"></a>4. 权限管理</h2><ul>
<li><h3 id="Oracle-1"><a href="#Oracle-1" class="headerlink" title="Oracle"></a>Oracle</h3></li>
<li><p>授权</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grant 权限 to 用户名;</div><div class="line">grant all on 表名 to用户/角色</div></pre></td></tr></table></figure>
<ul>
<li>收回权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revoke 权限from 用户名;</div></pre></td></tr></table></figure>
<p>　　对象权限可以级联收回，但是系统权限不可以级联收回。</p>
<p>　　<strong>(1) 系统权限：</strong> A 赋予一个系统权限给 B，B 再授予 C。然后A将该权限从 B 回收，此后 C 仍然有该权限。</p>
<p>　　<strong>(2) 对象权限：</strong> A 赋予一个对象权限给 B，B 再授予 C。然后A将该权限从 B 回收，此后 C 也失去了该权限。</p>
<ul>
<li>常用系统权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create session --用户登录</div><div class="line">create table     --创建表</div><div class="line">unlimited tablespace   --无限表空间</div></pre></td></tr></table></figure>
<ul>
<li>常用对象权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select on 表名; -- 查询权限</div><div class="line">update on 表名; -- 更新权限</div><div class="line">delete on 表名; -- 删除权限</div><div class="line">insert on 表名; -- 插入权限</div></pre></td></tr></table></figure>
<ul>
<li>权限的级联授予</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant 权限 to 用户名 with admin option|with grant option;</div></pre></td></tr></table></figure>
<p>　　<strong>with admin option</strong>：系统权限<br>　　<br>　　<strong>with grant option</strong>：对象权限</p>
<ul>
<li><h3 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h3></li>
<li><p>授权:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;</div></pre></td></tr></table></figure>
<p>　　<strong>备注：</strong><br>　　<strong>privileges</strong>：用户的操作权限,如 SELECT , INSERT , UPDATE 等；如果要授予所的权限则使用 ALL。<br>　　<strong>databasename</strong>：数据库名。<br>　　<strong>tablename</strong>：表名<br>　<br>　　如果要授予该用户对所有数据库和表的相应操作权限则可用 <code>*</code> 表示, 如 <code>*.*</code> 。</p>
<p>　　例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GRANT SELECT, INSERT ON test.user TO &apos;pig&apos;@&apos;%&apos;;</div><div class="line"> </div><div class="line">GRANT ALL ON *.* TO &apos;pig&apos;@&apos;%&apos;;</div></pre></td></tr></table></figure>
<p>　　<strong>注意：</strong> 用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos; WITH GRANT OPTION;</div></pre></td></tr></table></figure>
<ul>
<li>撤销用户权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REVOKE privilege ON databasename.tablename FROM &apos;username&apos;@&apos;host&apos;;</div></pre></td></tr></table></figure>
<p>　　<strong>说明：</strong> privilege, databasename, tablename - 同授权部分。</p>
<p>　　例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REVOKE SELECT ON *.* FROM &apos;pig&apos;@&apos;%&apos;;</div></pre></td></tr></table></figure>
<p>　　<strong>注意：</strong> 假如你在给用户 <code>&#39;pig&#39;@&#39;%&#39;</code> 授权的时候是这样的（或类似的）：<code>GRANT SELECT ON test.user TO &#39;pig&#39;@&#39;%&#39;;</code> 则在使用：<code>REVOKE SELECT ON *.* FROM&#39;pig&#39;@&#39;%&#39;;</code> 命令并不能撤销该用户对 test 数据库中 user 表的 SELECT 操作；相反，如果授权使用的是：<code>GRANT SELECT ON *.* TO&#39;pig&#39;@&#39;%&#39;;</code> 则：<code>REVOKE SELECT ONtest.user FROM &#39;pig&#39;@&#39;%&#39;;</code> 命令也不能撤销该用户对 test 数据库中 user 表的 SELECT 权限。</p>
<p>　　具体信息可以用命令：<code>SHOW GRANTS FOR &#39;pig&#39;@&#39;%&#39;;</code> 查看。</p>
<h2 id="5-Oracle角色-role"><a href="#5-Oracle角色-role" class="headerlink" title="5. Oracle角色 role"></a>5. Oracle角色 role</h2><p>　角色：权限的集合</p>
<ul>
<li><h3 id="角色数据字典表"><a href="#角色数据字典表" class="headerlink" title="角色数据字典表"></a>角色数据字典表</h3></li>
</ul>
<p>　　查看当前用户中的角色：<code>user_role_privs</code></p>
<p>　　查看角色中的系统权限：<code>role_sys_privs</code></p>
<p>　　查看角色中的对象权限：<code>role_tab_privs</code></p>
<ul>
<li><h3 id="建一个角色"><a href="#建一个角色" class="headerlink" title="建一个角色"></a>建一个角色</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create role role1;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="授权给角色"><a href="#授权给角色" class="headerlink" title="授权给角色"></a>授权给角色</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant create any table, create procedure to role1;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="授予-回收用户角色"><a href="#授予-回收用户角色" class="headerlink" title="授予/回收用户角色"></a>授予/回收用户角色</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">grant role1 to user1;</div><div class="line"></div><div class="line">revoke role1 from user1;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="创建带有口令以角色"><a href="#创建带有口令以角色" class="headerlink" title="创建带有口令以角色"></a>创建带有口令以角色</h3></li>
</ul>
<p>　　在生效带有口令的角色时必须提供口令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create role role1 identified by password1;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="修改角色：是否需要口令"><a href="#修改角色：是否需要口令" class="headerlink" title="修改角色：是否需要口令"></a>修改角色：是否需要口令</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter role role1 not identified;</div><div class="line"></div><div class="line">alter role role1 identified by password1;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="设置当前用户要生效的角色"><a href="#设置当前用户要生效的角色" class="headerlink" title="设置当前用户要生效的角色"></a>设置当前用户要生效的角色</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">set role role1; -- 使 role1 生效</div><div class="line"></div><div class="line">set role role1, role2; -- 使 role1, role2 生效</div><div class="line"></div><div class="line">set role role1 identified by password1; -- 使用带有口令的 role1 生效</div><div class="line"></div><div class="line">set role all; -- 使用该用户的所有角色生效</div><div class="line"></div><div class="line">set role none; -- 设置所有角色失效</div><div class="line"></div><div class="line">set role all except role1; -- 除 role1 外的该用户的所有其它角色生效</div><div class="line"></div><div class="line">select * from SESSION_ROLES; -- 查看当前用户的生效的角色。</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="修改指定用户，设置其默认角色"><a href="#修改指定用户，设置其默认角色" class="headerlink" title="修改指定用户，设置其默认角色"></a>修改指定用户，设置其默认角色</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter user user1 default role role1;</div><div class="line"></div><div class="line">alter user user1 default role all except role1;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="删除角色"><a href="#删除角色" class="headerlink" title="删除角色"></a>删除角色</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop role role1;</div></pre></td></tr></table></figure>
<p>　　<strong>注意：</strong> 角色删除后，原来拥用该角色的用户就不再拥有该角色了，相应的权限也就没有了。</p>
<ul>
<li><h3 id="系统角色"><a href="#系统角色" class="headerlink" title="系统角色"></a>系统角色</h3></li>
</ul>
<p>　　<strong>DBA:</strong> 拥有全部特权，是系统最高权限角色</p>
<p>　　<strong>RESOURCE</strong>：拥有 RESOURCE 角色权限的用户只可以创建实体</p>
<p>　　<strong>CONNECT</strong>：拥有 CONNECT 角色权限的用户只可以登录 Oracle</p>
<p>　　对于普通用户：授予 CONNECT，RESOURCE 角色权限；对于DBA管理用户：授予 CONNECT，RESOURCE， DBA 角色权限。</p>
<h2 id="6-查看表结构信息命令"><a href="#6-查看表结构信息命令" class="headerlink" title="6. 查看表结构信息命令"></a>6. 查看表结构信息命令</h2><ul>
<li><h3 id="Oracle-2"><a href="#Oracle-2" class="headerlink" title="Oracle"></a>Oracle</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">desc(ribe) 表名; -- 如：desc lxr</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="MySQL-2"><a href="#MySQL-2" class="headerlink" title="MySQL"></a>MySQL</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">desc(ribe) 表名;</div></pre></td></tr></table></figure>
<h2 id="7-显示当前登录用户："><a href="#7-显示当前登录用户：" class="headerlink" title="7. 显示当前登录用户："></a>7. 显示当前登录用户：</h2><ul>
<li><h3 id="Oracle-3"><a href="#Oracle-3" class="headerlink" title="Oracle"></a>Oracle</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show user;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="MySQL-3"><a href="#MySQL-3" class="headerlink" title="MySQL"></a>MySQL</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select user();</div></pre></td></tr></table></figure>
<h2 id="8-MySQL-查看用户下的数据库"><a href="#8-MySQL-查看用户下的数据库" class="headerlink" title="8. MySQL 查看用户下的数据库"></a>8. MySQL 查看用户下的数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure>
<p>　查看表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure>
<h2 id="9-Oracle-用户锁定与解锁"><a href="#9-Oracle-用户锁定与解锁" class="headerlink" title="9. Oracle 用户锁定与解锁"></a>9. Oracle 用户锁定与解锁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER USER username ACCOUNT LOCK; -- 锁定用户</div><div class="line"></div><div class="line">ALTER USER username ACCOUNT UNLOCK; -- 解锁用户</div></pre></td></tr></table></figure>
<h2 id="10-清屏命令"><a href="#10-清屏命令" class="headerlink" title="10. 清屏命令"></a>10. 清屏命令</h2><ul>
<li><h3 id="SQLPlus"><a href="#SQLPlus" class="headerlink" title="SQLPlus"></a>SQLPlus</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">clear screen -- 简写：cl scr</div><div class="line"></div><div class="line">cls -- dos 清屏命令</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="MySQL-4"><a href="#MySQL-4" class="headerlink" title="MySQL"></a>MySQL</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">system clear; -- Linux 环境下</div><div class="line"></div><div class="line">system cls; -- dos 环境下</div></pre></td></tr></table></figure>
<h2 id="11-Oracle-更改当前用户日期格式命令"><a href="#11-Oracle-更改当前用户日期格式命令" class="headerlink" title="11. Oracle 更改当前用户日期格式命令"></a>11. Oracle 更改当前用户日期格式命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter session set nls_date_format = &apos;yyyy-mm-dd&apos;;</div></pre></td></tr></table></figure>
<h2 id="12-Oracle-中的基本数据类型"><a href="#12-Oracle-中的基本数据类型" class="headerlink" title="12. Oracle 中的基本数据类型"></a>12. Oracle 中的基本数据类型</h2><p>　<strong>数值</strong>：number(5,2)，int</p>
<p>　<strong>字符</strong>：char，varchar2(4000)</p>
<p>　<strong>日期</strong>：date</p>
<p>　<strong>图片</strong>：BLOB (binaryLargeObject) 4G</p>
<p>　<strong>文本</strong>：CLOB (Character LargeObject) 4G</p>
<h2 id="13-Oracle-表结构操作"><a href="#13-Oracle-表结构操作" class="headerlink" title="13. Oracle 表结构操作"></a>13. Oracle 表结构操作</h2><ul>
<li><h3 id="表重命名"><a href="#表重命名" class="headerlink" title="表重命名"></a>表重命名</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 rename to 新表名;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="给表增加注释"><a href="#给表增加注释" class="headerlink" title="给表增加注释"></a>给表增加注释</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">comment on table 表名 is &apos;注释内容&apos;;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="添加约束方式"><a href="#添加约束方式" class="headerlink" title="添加约束方式"></a>添加约束方式</h3></li>
<li><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 add constraint 约束名 约束类型(约束的字段名);</div></pre></td></tr></table></figure>
<p>　　constraint 约束类型：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>primary key</td>
<td>主键</td>
</tr>
<tr>
<td>unique</td>
<td>唯一</td>
</tr>
<tr>
<td>check</td>
<td>限制</td>
</tr>
<tr>
<td>not null</td>
<td>不能为null</td>
</tr>
</tbody>
</table>
<ul>
<li><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 add constraint 约束名 foreign key(字段名) references 表名(字段名);</div></pre></td></tr></table></figure>
<p>　　<strong>foreign key 外键：</strong> 参照主键中存在的值，可以插入重复的记录、可以插入重复的空值</p>
<ul>
<li><h3 id="删除约束方式"><a href="#删除约束方式" class="headerlink" title="删除约束方式"></a>删除约束方式</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 drop constraint 约束名;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="删除表结构"><a href="#删除表结构" class="headerlink" title="删除表结构"></a>删除表结构</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop table 表名; -- 此操作属DDL，会自动提交且不可回滚</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="表中增加字段"><a href="#表中增加字段" class="headerlink" title="表中增加字段"></a>表中增加字段</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 add 字段名 类型;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 drop 字段名;</div></pre></td></tr></table></figure>
<p>　　通常在系统不忙的时候删除不使用的字段，可以先设置字段为 unused</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table test3 set unused column address;</div></pre></td></tr></table></figure>
<p>　　再执行删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table test3 unused column;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="字段重命名"><a href="#字段重命名" class="headerlink" title="字段重命名"></a>字段重命名</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 rename column 字段名 to 新字段名;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 modify 字段名 新类型;</div></pre></td></tr></table></figure>
<p>　　添加 not null</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 modify 字段名 not null</div></pre></td></tr></table></figure>
<p>　　删除 not null</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table 表名 modify 字段名 null;</div></pre></td></tr></table></figure>
<h2 id="14-Oracle-备份表"><a href="#14-Oracle-备份表" class="headerlink" title="14. Oracle 备份表"></a>14. Oracle 备份表</h2><ul>
<li><h3 id="在当前的数据库之内进行备份"><a href="#在当前的数据库之内进行备份" class="headerlink" title="在当前的数据库之内进行备份"></a>在当前的数据库之内进行备份</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create table 表名(字段) as select 查询语句;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="数据的移动"><a href="#数据的移动" class="headerlink" title="数据的移动"></a>数据的移动</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into 表名（字段列表）select 字段列表 from 表名;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="数据库服务器之间拷贝表"><a href="#数据库服务器之间拷贝表" class="headerlink" title="数据库服务器之间拷贝表"></a>数据库服务器之间拷贝表</h3></li>
</ul>
<p>　　<strong>知识点：</strong> 客户端连接服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy from system/hhl@hhl create hhl_table using select * from scott.emp;</div></pre></td></tr></table></figure>
<p>　　从A服务器拷贝到自己的数据库中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy from 用户名/密码@主机字符串 create 表名 using 查询语句;</div></pre></td></tr></table></figure>
<p>　　从自己的数据库中拷贝到A服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy to 用户用/密码@主机字符串 create 表名 using 查询语句;</div></pre></td></tr></table></figure>
<p>　　从A服务器拷贝表到B服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy from 用户用/密码@主机字符串 to 用户用/密码@主机字符串 create 表名 using 查询语句;</div></pre></td></tr></table></figure>
<h2 id="15-OracleDBLINK-数据库连接"><a href="#15-OracleDBLINK-数据库连接" class="headerlink" title="15. OracleDBLINK 数据库连接"></a>15. OracleDBLINK 数据库连接</h2><p>　在当前的数据库内直接操作其他服务器中的表做增删改查，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database link 名 connect to 用户名 identified by 密码 using &apos;主机字符串&apos;;</div></pre></td></tr></table></figure>
<h2 id="16-MySQL-查看数据库字符集"><a href="#16-MySQL-查看数据库字符集" class="headerlink" title="16. MySQL 查看数据库字符集"></a>16. MySQL 查看数据库字符集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">show variables like &apos;character%&apos;;</div><div class="line"></div><div class="line">show variables like &apos;%collation%&apos;;</div></pre></td></tr></table></figure>
<h2 id="17-truncate-与-delete"><a href="#17-truncate-与-delete" class="headerlink" title="17. truncate 与 delete"></a>17. truncate 与 delete</h2><ul>
<li><h3 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">truncate table 表名; -- 删除表中全部记录</div><div class="line"></div><div class="line">delete from 表名;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="truncate-与-delete-的区别"><a href="#truncate-与-delete-的区别" class="headerlink" title="truncate 与 delete 的区别"></a>truncate 与 delete 的区别</h3></li>
</ul>
<p>　　truncate 删除速度比 delete 删除速度快；</p>
<p>　　truncate 不可以回滚，delete 可以回滚。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对日常工作中使用 Oracle 和 MySQL 数据库知识对比总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-SQLPlus-连接数据库的方式&quot;&gt;&lt;a href=&quot;#1-SQLPlus-连接数据库的方式&quot; class=&quot;headerlink&quot; title=&quot;1. SQLPlus 连接数据库的方式&quot;&gt;&lt;/a&gt;1. SQLPlus 连接数据库的方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;cmd-中输入：sqlplus-用户名-密码-数据库实例&quot;&gt;&lt;a href=&quot;#cmd-中输入：sqlplus-用户名-密码-数据库实例&quot; class=&quot;headerlink&quot; title=&quot;cmd 中输入：sqlplus 用户名/密码@数据库实例&quot;&gt;&lt;/a&gt;cmd 中输入：sqlplus 用户名/密码@数据库实例&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sqlplus system/lxr316@oracle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sqlplus sys/admin as sysdba&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;打开-SQLPlus-直接输入用户名和密码&quot;&gt;&lt;a href=&quot;#打开-SQLPlus-直接输入用户名和密码&quot; class=&quot;headerlink&quot; title=&quot;打开 SQLPlus 直接输入用户名和密码&quot;&gt;&lt;/a&gt;打开 SQLPlus 直接输入用户名和密码&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;使用命令：&quot;&gt;&lt;a href=&quot;#使用命令：&quot; class=&quot;headerlink&quot; title=&quot;使用命令：&quot;&gt;&lt;/a&gt;使用命令：&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connect sys/admin as sysdba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connect system/lxr316&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://ehlxr.me/categories/SQL/"/>
    
    
      <category term="MySQL" scheme="http://ehlxr.me/tags/MySQL/"/>
    
      <category term="Oracle" scheme="http://ehlxr.me/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 更新已经 fork 的项目</title>
    <link href="http://ehlxr.me/2016/07/28/GitHub-%E6%9B%B4%E6%96%B0%E5%B7%B2%E7%BB%8F-fork-%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    <id>http://ehlxr.me/2016/07/28/GitHub-更新已经-fork-的项目/</id>
    <published>2016-07-28T02:12:15.000Z</published>
    <updated>2016-08-04T10:40:47.567Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 上有个很方便的功能叫 fork，将别人的工程一键复制到自己账号下。这个功能很方便，但有点不足的是，当源项目更新后，你 fork 的分支并不会一起更新，需要自己手动去更新，下面记录下网上找到的更新的开发方法。</p>
<h3 id="1-在本地装好-GitHub-客户端，或者-Git-客户端"><a href="#1-在本地装好-GitHub-客户端，或者-Git-客户端" class="headerlink" title="1. 在本地装好 GitHub 客户端，或者 Git 客户端"></a>1. 在本地装好 GitHub 客户端，或者 Git 客户端</h3><h3 id="2-clone-自己的-fork-分支到本地"><a href="#2-clone-自己的-fork-分支到本地" class="headerlink" title="2. clone 自己的 fork 分支到本地"></a>2. clone 自己的 fork 分支到本地</h3><p>　可以直接使用 GitHub 客户端，clone 到本地，如果使用命令行，命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:ehlxr/strman-java.git</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3-增加源分支地址到你项目远程分支列表中"><a href="#3-增加源分支地址到你项目远程分支列表中" class="headerlink" title="3. 增加源分支地址到你项目远程分支列表中"></a>3. 增加源分支地址到你项目远程分支列表中</h3><p>　此处是关键，先得将原来的仓库指定为 upstream，命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add upstream git@github.com:shekhargulati/strman-java.git</div></pre></td></tr></table></figure>
<p>　此处可使用 git remote -v 查看远程分支列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  git@github.com:ehlxr/strman-java.git (fetch)</div><div class="line">origin  git@github.com:ehlxr/strman-java.git (push)</div><div class="line">upstream  git@github.com:shekhargulati/strman-java.git (fetch)</div><div class="line">upstream  git@github.com:shekhargulati/strman-java.git (push)</div></pre></td></tr></table></figure>
<h3 id="4-fetch-源分支的新版本到本地"><a href="#4-fetch-源分支的新版本到本地" class="headerlink" title="4. fetch 源分支的新版本到本地"></a>4. fetch 源分支的新版本到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch upstream</div></pre></td></tr></table></figure>
<h3 id="5-合并两个版本的代码"><a href="#5-合并两个版本的代码" class="headerlink" title="5. 合并两个版本的代码"></a>5. 合并两个版本的代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge upstream/master</div></pre></td></tr></table></figure>
<h3 id="6-将合并后的代码-push-到-GitHub-上去"><a href="#6-将合并后的代码-push-到-GitHub-上去" class="headerlink" title="6. 将合并后的代码 push 到 GitHub 上去"></a>6. 将合并后的代码 push 到 GitHub 上去</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<hr>
<p>参考网址：</p>
<p><a href="https://help.github.com/articles/fork-a-repo" target="_blank" rel="external">https://help.github.com/articles/fork-a-repo</a></p>
<p><a href="http://www.makaidong.com/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E7%89%9B/14167.shtml" target="_blank" rel="external">原文出处</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub 上有个很方便的功能叫 fork，将别人的工程一键复制到自己账号下。这个功能很方便，但有点不足的是，当源项目更新后，你 fork 的分支并不会一起更新，需要自己手动去更新，下面记录下网上找到的更新的开发方法。&lt;/p&gt;
&lt;h3 id=&quot;1-在本地装好-GitHub-客户端，或者-Git-客户端&quot;&gt;&lt;a href=&quot;#1-在本地装好-GitHub-客户端，或者-Git-客户端&quot; class=&quot;headerlink&quot; title=&quot;1. 在本地装好 GitHub 客户端，或者 Git 客户端&quot;&gt;&lt;/a&gt;1. 在本地装好 GitHub 客户端，或者 Git 客户端&lt;/h3&gt;&lt;h3 id=&quot;2-clone-自己的-fork-分支到本地&quot;&gt;&lt;a href=&quot;#2-clone-自己的-fork-分支到本地&quot; class=&quot;headerlink&quot; title=&quot;2. clone 自己的 fork 分支到本地&quot;&gt;&lt;/a&gt;2. clone 自己的 fork 分支到本地&lt;/h3&gt;&lt;p&gt;　可以直接使用 GitHub 客户端，clone 到本地，如果使用命令行，命令为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git clone git@github.com:ehlxr/strman-java.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="http://ehlxr.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
      <category term="GitHub" scheme="http://ehlxr.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 插件安装</title>
    <link href="http://ehlxr.me/2016/07/25/Sublime-Text-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://ehlxr.me/2016/07/25/Sublime-Text-插件安装/</id>
    <published>2016-07-25T13:06:57.000Z</published>
    <updated>2016-08-04T10:40:47.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Sublime Text 官方介绍：</p>
<blockquote>
<p>“Sublime Text is a sophisticated text editor for code, markup and prose.You’ll love the slick user interface, extraordinary features and amazing performance.”</p>
</blockquote>
</blockquote>
<p>Sublime Text 是一款优秀的轻量级编辑器，而且支持跨平台，支持Windows、Linux、Mac OS X 等主流操作系统。虽然是一款收费软件，但也允许人们<strong>无限期免费使用</strong>。（<a href="http://www.sublimetext.com/3" target="_blank" rel="external">官方下载地址</a>）</p>
<p>Sublime Text 具有漂亮的用户界面和强大可扩展插件功能，本文介绍如何安装 Sublime Text 插件。</p>
<a id="more"></a>
<p>打开 Sublime Text 编辑器的 Console（控制台）使用快捷键 <code>ctrl+`</code> 或者点击菜单 <code> View &gt; Show Console menu </code> 打开 Console，如图：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160725212921.png" alt=""></p>
<p>Sublime Text 2 粘贴以下代码：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib2,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); <span class="keyword">by</span> = urllib2.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); <span class="built_in">open</span>( os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>) <span class="keyword">if</span> dh == h <span class="keyword">else</span> None; print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="string">'Please restart Sublime Text to finish installation'</span>)</div></pre></td></tr></table></figure>
<p>Sublime Text 3 粘贴以下代码：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>)</div></pre></td></tr></table></figure>
<p>敲回车等待安装完成后重启 Sublime Text 即可，按下快捷键 <code> ctrl + shift + p </code> ,输入 <code>pci</code>（Package Control Install 简写）如图：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160725213757.png" alt=""></p>
<p>敲回车即可打开插件安装界面，输入想要安装插件的名称即可开始安装，如图：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160725214353.png" alt=""></p>
<p>Sublime Text 插件安装介绍完了，需要注意的是安装过程中要保持网络畅通。</p>
<p><a href="https://packagecontrol.io/installation" target="_blank" rel="external">参考网址</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Sublime Text 官方介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Sublime Text is a sophisticated text editor for code, markup and prose.You’ll love the slick user interface, extraordinary features and amazing performance.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sublime Text 是一款优秀的轻量级编辑器，而且支持跨平台，支持Windows、Linux、Mac OS X 等主流操作系统。虽然是一款收费软件，但也允许人们&lt;strong&gt;无限期免费使用&lt;/strong&gt;。（&lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;官方下载地址&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;Sublime Text 具有漂亮的用户界面和强大可扩展插件功能，本文介绍如何安装 Sublime Text 插件。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Sublime" scheme="http://ehlxr.me/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>Git 同时 push 到多个远程仓库</title>
    <link href="http://ehlxr.me/2016/07/24/Git-%E5%90%8C%E6%97%B6-push-%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <id>http://ehlxr.me/2016/07/24/Git-同时-push-到多个远程仓库/</id>
    <published>2016-07-24T10:55:59.000Z</published>
    <updated>2016-08-25T08:36:11.631Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3></li>
</ul>
<p>　　如果一个本地仓库添加多个远程仓库，不想 git push 多次，可以修改 .git/config 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim .git/config</div></pre></td></tr></table></figure>
<p>　　比如以下信息表示在 git@OSC 和 GitHub 两个远程托管</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160724193534.png" alt=""></p>
<a id="more"></a>
<p>　　修改为以下信息</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160724190056.png" alt=""></p>
<p>　　则可同时 push 到两个远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div><div class="line">Everything up-to-date</div><div class="line">Everything up-to-date</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3></li>
</ul>
<p>　　添加第二个远程地址时使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url --add origin git@github.com:ehlxr/ehlxr-Hexo.git</div></pre></td></tr></table></figure>
<p>　　查看远程分支 origin：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  git@git.oschina.net:ehlxr/ehlxr-Hexo.git (fetch)</div><div class="line">origin  git@git.oschina.net:ehlxr/ehlxr-Hexo.git (push)</div><div class="line">origin  git@github.com:ehlxr/ehlxr-Hexo.git (push)</div></pre></td></tr></table></figure>
<p>　　也可以同时 push 到多个远程地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div><div class="line">Everything up-to-date</div><div class="line">Everything up-to-date</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　如果一个本地仓库添加多个远程仓库，不想 git push 多次，可以修改 .git/config 文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vim .git/config&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　　比如以下信息表示在 git@OSC 和 GitHub 两个远程托管&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20160724193534.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://ehlxr.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo基于GitHub Pages搭建个人博客（二）</title>
    <link href="http://ehlxr.me/2016/07/23/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://ehlxr.me/2016/07/23/使用Hexo基于GitHub-Pages搭建个人博客（二）/</id>
    <published>2016-07-23T07:57:49.000Z</published>
    <updated>2016-09-04T03:11:31.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上一篇介绍了 GitHub Pages 服务开启，这篇文章将介绍 Hexo 的安装和使用以及将博客部署到 GitHub Pages 的操作。</p>
<blockquote>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</a></p>
</blockquote>
</blockquote>
<h1 id="一、Node-js-安装"><a href="#一、Node-js-安装" class="headerlink" title="一、Node.js 安装"></a>一、Node.js 安装</h1><p>　　Hexo 是基于 Node.js 安装，所以安装 Hexo 之前首先要安装 Node.js。下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a> 根据自己的操作系统，下载对应版本即可。安装过程比较简单，一直下一步即可安装完成。</p>
<a id="more"></a>
<h1 id="二、Hexo-安装"><a href="#二、Hexo-安装" class="headerlink" title="二、Hexo 安装"></a>二、Hexo 安装</h1><ul>
<li>打开 Git Bash 输入以下命令开始安装 Hexo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<ul>
<li>出现以下界面表示安装完成</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723214644.png" alt=""></p>
<h1 id="三、Hexo-建站"><a href="#三、Hexo-建站" class="headerlink" title="三、Hexo 建站"></a>三、Hexo 建站</h1><p>　　安装 Hexo 完成后，在本地磁盘创建一个目录用于存放 Hexo 配置文件和博客源代码，我的 Hexo 存放在 <code>D:/ehlxr</code> 目录下。</p>
<ul>
<li>分别执行下列命令，Hexo 将会在 <code>D:/ehlxr/Hexo</code> 新建所需要的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 进入 D:/ehlxr 目录</div><div class="line">cd /d/ehlxr/</div><div class="line"></div><div class="line"># 初始化所需要的文件到 Hexo 文件夹</div><div class="line">hexo init Hexo</div><div class="line"></div><div class="line"># 进入 Hexo 文件夹</div><div class="line">cd Hexo</div><div class="line"></div><div class="line"># 安装</div><div class="line">npm install</div></pre></td></tr></table></figure>
<ul>
<li>分别执行以下命令在本地进行预览</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 编译生成博文</div><div class="line">hexo generate</div><div class="line"></div><div class="line"># 启动Hexo服务器</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<ul>
<li>出现以下画面表示服务启动成功</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723225446.png" alt=""></p>
<ul>
<li>打开浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 便可以看到最原始的博客了</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160724123205.png" alt=""></p>
<h1 id="四、Hexo-部署到-GitHub-Pages"><a href="#四、Hexo-部署到-GitHub-Pages" class="headerlink" title="四、Hexo 部署到 GitHub Pages"></a>四、Hexo 部署到 GitHub Pages</h1><ul>
<li>更新 Hexo 安装文件夹中 <code>_config.yml</code> 文件，如图</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723231000.png" alt=""></p>
<ul>
<li>更新 <code>_config.yml</code> 文件中的 <code>deploy</code> 节点，如图所示，可添加多个地址（如一个 GitHub、Coding、oschina）</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160724182310.png" alt=""></p>
<ul>
<li>分别执行以下命令即可完成部署</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save # 安装 hexo-deployer-git</div><div class="line"></div><div class="line">hexo clean # 可简写为 hexo cl</div><div class="line">hexo generate # 可简写为 hexo g</div><div class="line">hexo deploy # 可简写为 hexo d</div></pre></td></tr></table></figure>
<ul>
<li><p>访问 <a href="https://ehlxr.github.io/" target="_blank" rel="external">yourname.github.io</a> 即可看到博客模板的内容，对于 Hexo 的一些详细设置可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a> 。本站使用的 Hexo 主题是 NexT，详细设置可参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next主题官方网站</a>。</p>
</li>
<li><p>使用以下命令就可以新建一篇博客文章</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;开始blog，哈哈&quot;</div></pre></td></tr></table></figure>
<ul>
<li>打开 Hexo 目录下的 <code>source\_posts</code> 目录就可以看见创建的文章了，如图所示</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160724093526.png" alt="enter description here"></p>
<ul>
<li><p>文章是 MarkDown 格式文件（关于 Markdown 语法可参考<a href="http://www.appinn.com/markdown/basic.html" target="_blank" rel="external">Markdown 语法说明(简体中文版)</a>），编辑文章后保存，可以先启动本地 Hexo Server 查看效果，然后执行部署命令就完成了博客文章的发布</p>
</li>
<li><p>Markdown 编辑器我推荐使用 <a href="http://soft.xiaoshujiang.com/" target="_blank" rel="external">小书匠</a></p>
</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160724100055.png" alt="enter description here"></p>
<p>　　至此，使用 Hexo 基于 GitHub Pages 搭建个人博客就介绍完了。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上一篇介绍了 GitHub Pages 服务开启，这篇文章将介绍 Hexo 的安装和使用以及将博客部署到 GitHub Pages 的操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、Node-js-安装&quot;&gt;&lt;a href=&quot;#一、Node-js-安装&quot; class=&quot;headerlink&quot; title=&quot;一、Node.js 安装&quot;&gt;&lt;/a&gt;一、Node.js 安装&lt;/h1&gt;&lt;p&gt;　　Hexo 是基于 Node.js 安装，所以安装 Hexo 之前首先要安装 Node.js。下载地址：&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;https://nodejs.org/en/download/&lt;/a&gt; 根据自己的操作系统，下载对应版本即可。安装过程比较简单，一直下一步即可安装完成。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://ehlxr.me/categories/Hexo/"/>
    
    
      <category term="GitHub" scheme="http://ehlxr.me/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://ehlxr.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo基于GitHub Pages搭建个人博客（一）</title>
    <link href="http://ehlxr.me/2016/07/23/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://ehlxr.me/2016/07/23/使用Hexo基于GitHub-Pages搭建个人博客（一）/</id>
    <published>2016-07-23T03:35:43.000Z</published>
    <updated>2016-09-04T03:11:34.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>GitHub Pages 是 GitHub 提供的免费开源的静态站点托管服务，利用这个服务可以搭建轻量级的博客系统，本文介绍了如何使用 Hexo 结合 GitHub Pages 服务搭建个人博客。</p>
</blockquote>
<h1 id="一、安装配置-Git"><a href="#一、安装配置-Git" class="headerlink" title="一、安装配置 Git"></a>一、安装配置 Git</h1><ul>
<li>安装 Git</li>
</ul>
<p>　　使用 GitHub 首先要安装 Git，可根据操作系统下载不同版本的Git，Windows下载地址：<a href="https://git-scm.com/download/win" target="_blank" rel="external">https://git-scm.com/download/win</a> 安装过程比较简单，选择默认选项配置即可下一步，不再叙述。</p>
<ul>
<li>配置 Git</li>
</ul>
<p>　　设置本地机器默认 commit 的昵称与 Email，姓名与 Email 只用于日志标识，实际推送到远程仓库时，要用有操作权限的账号登录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;ehlxr&quot;  </div><div class="line">git config --global user.email &quot;ehlxr@qq.com&quot;</div></pre></td></tr></table></figure>
<h1 id="二、生成-SSH-keys"><a href="#二、生成-SSH-keys" class="headerlink" title="二、生成 SSH keys"></a>二、生成 SSH keys</h1><p>　　SSH Keys 是 GitHub 推荐的公钥、秘钥形式验证用户合法性的机制，添加 SSH Keys 可以省去每次都要输入密码的步骤，下面将演示如何在本地计算机生成 SSH Keys 的公钥、秘钥。</p>
<a id="more"></a>
<ul>
<li>首先打开安装的 Git Bash</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723141920.png" alt=""></p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723142100.png" alt=""></p>
<ul>
<li>输入以下命令：（替换 <code>&quot;your_email@example.com&quot;</code> 为注册时候的邮箱）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>
<ul>
<li>当出现以下提示时，直接敲回车键选择默认地址即可（保存私钥文件位置，默认保存在当前用户文件夹下的 <code>.ssh</code> 文件夹中，文件名称为 <code>id_rsa</code> ）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter file in which to save the key (/c/Users/lt/.ssh/id_rsa):</div></pre></td></tr></table></figure>
<ul>
<li>如果已经存在会提示，输入：y 敲回车替换即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/c/Users/lt/.ssh/id_rsa already exists.</div><div class="line">Overwrite (y/n)?</div></pre></td></tr></table></figure>
<ul>
<li>出现以下提示设置密码提示，不用设置密码，敲回车键即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):</div></pre></td></tr></table></figure>
<ul>
<li>再次确认密码提示，不用设密码敲回车即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter same passphrase again:</div></pre></td></tr></table></figure>
<ul>
<li>出现以下提示，表明已经成功生成了 SSH Keys</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Your identification has been saved in /c/Users/lt/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /c/Users/lt/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:dBtq6OOJs1JQat630kGqh420Y0JSb7smaR6c9jjo7h0 your_email@example.com</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+---[RSA 4096]----+</div><div class="line">|                 |</div><div class="line">|    .            |</div><div class="line">|   o    . o      |</div><div class="line">|  =   .o o o     |</div><div class="line">| + + o. S .      |</div><div class="line">|.oo.*.o.         |</div><div class="line">|oo=E +oo         |</div><div class="line">|o.#+Oooo         |</div><div class="line">|+OoO==o          |</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure>
<p>　　<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">Github 官网 SSH Keys 生成教程</a></p>
<h1 id="三、开启-GitHub-Pages-服务"><a href="#三、开启-GitHub-Pages-服务" class="headerlink" title="三、开启 GitHub Pages 服务"></a>三、开启 GitHub Pages 服务</h1><p>　　GitHub 账户注册比较简单，注册免费使用的账户就可以了，这里就不细说了，需要注意的是尽量不要使用 126/163 邮箱注册，我在测试的时候收不到验证码，等收到验证码的时候已经第二天了，早就过期了，我使用 Gmail 和 QQ 邮箱都能很快收到验证码。</p>
<h2 id="1-添加生成的-SSH-Keys-到-GitHub"><a href="#1-添加生成的-SSH-Keys-到-GitHub" class="headerlink" title="1.添加生成的 SSH Keys 到 GitHub"></a>1.添加生成的 SSH Keys 到 GitHub</h2><ul>
<li>打开生成的 SSH Keys 公钥</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723144829.png" alt=""></p>
<ul>
<li>登录注册的 GitHub 账户，按照以下图示 1、 2、 3、 4、 5、6、 7 步骤操作，复制公钥内容粘贴到下图步骤 5 的 Key 输入框中，在步骤6输入一个标题，点击步骤 7 <code>Add SSH key</code>，这时候会提示你输入 GitHub 密码，输入密码确认即可添加成功。</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723142019.png" alt=""></p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723142036.png" alt=""></p>
<h2 id="2-创建-GitHub-仓库"><a href="#2-创建-GitHub-仓库" class="headerlink" title="2.创建 GitHub 仓库"></a>2.创建 GitHub 仓库</h2><ul>
<li>按照下图所示操作，仓库名称按照：<code>yourname.github.io</code> 格式创建，这样就可以通过 <code>yourname.github.io</code> 方式访问你的博客。如果创建名称为：<code>myblog</code> ,则博客的访问路径为 <code>yourname.github.io/myblog</code> </li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723165328.png" alt=""></p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723171101.png" alt=""></p>
<ul>
<li>填写完仓库名称，其他选项默认，点击 <code>Create repository</code> 即可完成创建。</li>
</ul>
<h2 id="3-测试-GitHub-Pages-服务"><a href="#3-测试-GitHub-Pages-服务" class="headerlink" title="3.测试 GitHub Pages 服务"></a>3.测试 GitHub Pages 服务</h2><ul>
<li>接下来在仓库根目录下创建一个 <code>index.html</code> 文件测试 GitHub Pages 服务是否开启成功。打开刚才创建的仓库，因为我们之前已经添加了 SSH Keys，所以选择复制如下图所示的 SSH 仓库连接</li>
</ul>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20160723190223.png" alt=""></p>
<ul>
<li>在电脑磁盘创建一个文件夹（我创建在：D:/lxr）在 Git Bash 分别输入以下两条命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /d/lxr/ # 进入创建的文件夹</div><div class="line"></div><div class="line">git init # 初始化本地仓库</div></pre></td></tr></table></figure>
<ul>
<li>在本地文件夹中创建 <code>index.html</code> 文件，随便输入一些内容即可，命令如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot; &gt;&gt; index.html # 创建 index.html 文件</div></pre></td></tr></table></figure>
<ul>
<li>然后分别执行以下命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add index.html # 添加文件</div><div class="line">git commit -m &quot;create index.html&quot; # 提交文件</div><div class="line">git remote add origin git@github.com:ehlxr/ehlxr.github.io.git # 添加 GitHub 仓库地址，注意地址填写自己注册的 GitHub 仓库地址</div><div class="line">git push -u origin master # push 到 GitHub</div></pre></td></tr></table></figure>
<ul>
<li>浏览器访问：<a href="http://ehlxr.github.io" target="_blank" rel="external">yourname.github.io</a> 如果出现 <code>index.html</code> 输入的内容，即 GitHub Pages 服务开启成功</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GitHub Pages 是 GitHub 提供的免费开源的静态站点托管服务，利用这个服务可以搭建轻量级的博客系统，本文介绍了如何使用 Hexo 结合 GitHub Pages 服务搭建个人博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、安装配置-Git&quot;&gt;&lt;a href=&quot;#一、安装配置-Git&quot; class=&quot;headerlink&quot; title=&quot;一、安装配置 Git&quot;&gt;&lt;/a&gt;一、安装配置 Git&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装 Git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　使用 GitHub 首先要安装 Git，可根据操作系统下载不同版本的Git，Windows下载地址：&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;https://git-scm.com/download/win&lt;/a&gt; 安装过程比较简单，选择默认选项配置即可下一步，不再叙述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置 Git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　设置本地机器默认 commit 的昵称与 Email，姓名与 Email 只用于日志标识，实际推送到远程仓库时，要用有操作权限的账号登录。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.name &amp;quot;ehlxr&amp;quot;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.email &amp;quot;ehlxr@qq.com&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;二、生成-SSH-keys&quot;&gt;&lt;a href=&quot;#二、生成-SSH-keys&quot; class=&quot;headerlink&quot; title=&quot;二、生成 SSH keys&quot;&gt;&lt;/a&gt;二、生成 SSH keys&lt;/h1&gt;&lt;p&gt;　　SSH Keys 是 GitHub 推荐的公钥、秘钥形式验证用户合法性的机制，添加 SSH Keys 可以省去每次都要输入密码的步骤，下面将演示如何在本地计算机生成 SSH Keys 的公钥、秘钥。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://ehlxr.me/categories/Hexo/"/>
    
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
      <category term="GitHub" scheme="http://ehlxr.me/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://ehlxr.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>[转]JMS基本概念</title>
    <link href="http://ehlxr.me/2016/07/21/%E8%BD%AC-JMS%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://ehlxr.me/2016/07/21/转-JMS基本概念/</id>
    <published>2016-07-21T04:35:43.000Z</published>
    <updated>2016-08-04T10:40:47.569Z</updated>
    
    <content type="html"><![CDATA[<p>JMS（JAVA Message Service,java消息服务）API是一个消息服务的标准或者说是规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JMS是java的消息服务，JMS的客户端之间可以通过JMS服务进行异步的消息传输。</p>
<h2 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h2><ul>
<li>Point-to-Point(P2P) </li>
<li>Publish/Subscribe(Pub/Sub)</li>
</ul>
<p>即点对点和发布订阅模型<br><a id="more"></a></p>
<h2 id="P2P模型"><a href="#P2P模型" class="headerlink" title="P2P模型"></a>P2P模型</h2><h3 id="P2P模式图"><a href="#P2P模式图" class="headerlink" title="P2P模式图"></a>P2P模式图</h3><p><img src="/images/post/1469075459852.jpg" alt="P2P模式图"></p>
<h3 id="涉及到的概念"><a href="#涉及到的概念" class="headerlink" title="涉及到的概念"></a>涉及到的概念</h3><ul>
<li>消息队列（Queue） </li>
<li>发送者(Sender) </li>
<li>接收者(Receiver)</li>
</ul>
<p>每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p>
<h3 id="P2P模型的特点"><a href="#P2P模型的特点" class="headerlink" title="P2P模型的特点"></a>P2P模型的特点</h3><ul>
<li>每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中)</li>
<li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</li>
<li>接收者在成功接收消息之后需向队列应答成功</li>
</ul>
<p>如果你希望发送的每个消息都应该被成功处理的话，那么你需要P2P模式。</p>
<h2 id="Pub-Sub模型"><a href="#Pub-Sub模型" class="headerlink" title="Pub/Sub模型"></a>Pub/Sub模型</h2><h3 id="Pub-Sub模式图"><a href="#Pub-Sub模式图" class="headerlink" title="Pub/Sub模式图"></a>Pub/Sub模式图</h3><p><img src="/images/post/20150630221227522.jpg" alt="Pub/Sub模式图"></p>
<h3 id="涉及到的概念-1"><a href="#涉及到的概念-1" class="headerlink" title="涉及到的概念"></a>涉及到的概念</h3><ul>
<li>主题（Topic） </li>
<li>发布者（Publisher） </li>
<li>订阅者（Subscriber）</li>
</ul>
<p>客户端将消息发送到主题。多个发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。</p>
<h3 id="Pub-Sub模型的特点"><a href="#Pub-Sub模型的特点" class="headerlink" title="Pub/Sub模型的特点"></a>Pub/Sub模型的特点</h3><ul>
<li>每个消息可以有多个消费者</li>
<li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息，而且为了消费消息，订阅者必须保持运行的状态。</li>
<li>为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。</li>
</ul>
<p>如果你希望发送的消息可以不被做任何处理、或者被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用Pub/Sub模型。</p>
<h2 id="消息的消费"><a href="#消息的消费" class="headerlink" title="消息的消费"></a>消息的消费</h2><p>在JMS中，消息的产生和消息是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。 </p>
<ul>
<li>同步<br>订阅者或接收者调用receive方法来接收消息，receive方法在能够接收到消息之前（或超时之前）将一直阻塞 </li>
<li>异步<br>订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法</li>
</ul>
<h2 id="JMS编程模型"><a href="#JMS编程模型" class="headerlink" title="JMS编程模型"></a>JMS编程模型</h2><ul>
<li><h3 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h3></li>
</ul>
<p>创建Connection对象的工厂，针对两种不同的jms消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。可以通过JNDI来查找ConnectionFactory对象。</p>
<ul>
<li><h3 id="Destination"><a href="#Destination" class="headerlink" title="Destination"></a>Destination</h3></li>
</ul>
<p>Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。</p>
<p>所以，Destination实际上就是两种类型的对象：Queue、Topic可以通过JNDI来查找Destination。</p>
<ul>
<li><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3></li>
</ul>
<p>Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP socket的包装）。Connection可以产生一个或多个Session。跟ConnectionFactory一样，Connection也有两种类型：QueueConnection和TopicConnection。</p>
<ul>
<li><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3></li>
</ul>
<p>Session是我们操作消息的接口。可以通过session创建生产者、消费者、消息等。Session提供了事务的功能。当我们需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。同样，也分QueueSession和TopicSession。</p>
<ul>
<li><h3 id="消息的生产者"><a href="#消息的生产者" class="headerlink" title="消息的生产者"></a>消息的生产者</h3></li>
</ul>
<p>消息生产者由Session创建，并用于将消息发送到Destination。同样，消息生产者分两种类型：QueueSender和TopicPublisher。可以调用消息生产者的方法（send或publish方法）发送消息。</p>
<ul>
<li><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3></li>
</ul>
<p>消息消费者由Session创建，用于接收被发送到Destination的消息。两种类型：QueueReceiver和TopicSubscriber。可分别通过session的createReceiver(Queue)或createSubscriber(Topic)来创建。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。</p>
<ul>
<li><h3 id="MessageListener"><a href="#MessageListener" class="headerlink" title="MessageListener"></a>MessageListener</h3></li>
</ul>
<p>消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。</p>
<h2 id="企业消息系统的好处"><a href="#企业消息系统的好处" class="headerlink" title="企业消息系统的好处"></a>企业消息系统的好处</h2><p>我们先来看看下图，应用程序A将Message发送到服务器上，然后应用程序B从服务器中接收A发来的消息，通过这个图我们一起来分析一下JMS的好处： </p>
<p><img src="/images/post/20150630221818616.jpg" alt="企业消息系统的好处"></p>
<ul>
<li>提供消息灵活性</li>
<li>松散耦合</li>
<li>异步性</li>
</ul>
<hr>
<p><a href="http://blog.csdn.net/jiuqiyuliang/article/details/46701559" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JMS（JAVA Message Service,java消息服务）API是一个消息服务的标准或者说是规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;JMS是java的消息服务，JMS的客户端之间可以通过JMS服务进行异步的消息传输。&lt;/p&gt;
&lt;h2 id=&quot;消息模型&quot;&gt;&lt;a href=&quot;#消息模型&quot; class=&quot;headerlink&quot; title=&quot;消息模型&quot;&gt;&lt;/a&gt;消息模型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Point-to-Point(P2P) &lt;/li&gt;
&lt;li&gt;Publish/Subscribe(Pub/Sub)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即点对点和发布订阅模型&lt;br&gt;
    
    </summary>
    
      <category term="Java开发技术" scheme="http://ehlxr.me/categories/Java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://ehlxr.me/tags/Java/"/>
    
      <category term="JMS" scheme="http://ehlxr.me/tags/JMS/"/>
    
  </entry>
  
  <entry>
    <title>Java List与数组之间的转换</title>
    <link href="http://ehlxr.me/2016/07/20/Java-List%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://ehlxr.me/2016/07/20/Java-List与数组之间的转换/</id>
    <published>2016-07-20T07:52:33.000Z</published>
    <updated>2016-08-04T10:40:47.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-数组转换为List"><a href="#1-数组转换为List" class="headerlink" title="1. 数组转换为List"></a>1. 数组转换为List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] arr = <span class="keyword">new</span> String[] &#123;<span class="string">"str1"</span>, <span class="string">"str2"</span>&#125;;</div><div class="line">List&lt;String&gt; list = Arrays.asList(arr);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-List转换为数组"><a href="#2-List转换为数组" class="headerlink" title="2 .List转换为数组"></a>2 .List转换为数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="string">"str1"</span>);</div><div class="line">list.add(<span class="string">"str2"</span>);</div><div class="line"><span class="keyword">int</span> size = list.size();</div><div class="line">String[] arr = list.toArray(<span class="keyword">new</span> String[size]);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-数组转换为List&quot;&gt;&lt;a href=&quot;#1-数组转换为List&quot; class=&quot;headerlink&quot; title=&quot;1. 数组转换为List&quot;&gt;&lt;/a&gt;1. 数组转换为List&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String[] arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[] &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;str1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;str2&quot;&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(arr);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java开发技术" scheme="http://ehlxr.me/categories/Java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://ehlxr.me/tags/Java/"/>
    
      <category term="List" scheme="http://ehlxr.me/tags/List/"/>
    
  </entry>
  
</feed>
